{"version":3,"sources":["test.worker.ts","common/geometry.ts","InputImageUrl.tsx","RendererFromUrl.tsx","RendererFromDrawing.tsx","RendererFromData.tsx","GAInformation.tsx","InputRange.tsx","GAConfiguration.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Worker_fn","Worker","getRGBAFromColor","c","length","drawPolygon","ctx","polygon","vertices","fillStyle","color","beginPath","vertex","moveTo","x","y","i","lineTo","closePath","fill","getLimitDimensions","width","height","limit","ratioImage","Math","round","ratio","InputImageUrl","start","stop","links","isStopped","className","useState","url","setUrl","onSubmit","e","preventDefault","type","name","value","onChange","target","disabled","id","onClick","linkElements","forEach","link","elem","currentTarget","push","generateLinks","RendererFromUrl","onImageDrawn","onLoadingError","classNameOnError","canvasRef","useRef","isErrorOnLoad","setError","imageUrl","setImageUrl","useEffect","canvas","current","getContext","img","Image","crossOrigin","onload","console","error","drawImage","src","onerror","ref","RendererFromDrawing","ratioW","ratioH","drawingSteps","clearRect","fillRect","scale","shape","draw","RendererFromData","data","putImageData","GAInformation","generation","fitness","ssim","pixelDiff","idBest","elapsedTimeForGeneration","notImprovingSince","InputRange","defaultVal","min","max","step","label","setValue","newValue","valueAsNumber","GAConfiguration","population","parentSelectionStrategy","selectCutoff","tournamentSize","keepPreviousRatio","newIndividualRatio","crossoverParentRatio","mutationRate","crossoverStrategy","vertexMovement","colorModificationRate","enableSsim","enablePixelDiff","ratioSsim","ratioPixelDiff","enableTransparency","nbVertex","nbPolygons","onValuesChange","values","setValues","v","htmlFor","checked","App","configuration","setConfiguration","isRunning","best","genes","diff","undefined","probability","phenotype","elapsedTime","simulation","setSimulation","response","setResponse","image","renderedWidth","renderedHeight","ratioOffscreenWidth","ratioOffscreenHeight","offscreenWidth","offscreenHeight","limitOffscreen","imageFromUrl","setImage","myWorkerInstance","setWorker","setStop","handleResponse","useCallback","handleStart","newWorker","MyWorker","log","addEventListener","message","renderingHeight","renderingWidth","postMessage","handleStop","terminate","handleUrlImageDrawn","simDimensions","OffscreenCanvas","getImageData","handleLoadingImageError","handleValuesChange","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b5213fa.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/test.worker.e01b56fa.js\");\n}\n","import { Context } from \"vm\";\r\n\r\nexport interface Rect {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    color: number[];\r\n}\r\n\r\nexport interface Vertex {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Polygon {\r\n    vertices: Vertex[];\r\n    color: number[];\r\n}\r\n\r\nexport interface Image {\r\n    image: ImageData|null;\r\n    renderedWidth: number;\r\n    renderedHeight: number;\r\n    offscreenWidth: number;\r\n    offscreenHeight: number;\r\n    ratioOffscreenWidth: number; // ratio to limit\r\n    ratioOffscreenHeight: number; // ratio to limit\r\n    limitOffscreen: number;\r\n}\r\n\r\nexport function getRGBAFromColor(c: number[]): string {\r\n    let color = \"rgb(0, 0, 0\";\r\n    if (c.length === 3) {\r\n        color = `rgb(${c[0]},${c[1]},${c[2]})`;\r\n    }\r\n    else {\r\n        color = `rgba(${c[0]},${c[1]},${c[2]},${c[3]})`\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function drawRectangle(ctx: Context, rect: Rect) {\r\n    if (!ctx ) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle =  getRGBAFromColor(rect.color);;\r\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nexport function drawPolygon(ctx: Context, polygon: Polygon) {\r\n    if (!ctx || polygon.vertices.length === 0) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle = getRGBAFromColor(polygon.color);\r\n    ctx.beginPath();\r\n\r\n    let vertex = polygon.vertices[0];\r\n    ctx.moveTo(vertex.x, vertex.y);\r\n    for(let i = 1; i < polygon.vertices.length; i++) {\r\n        vertex = polygon.vertices[i];\r\n        ctx.lineTo(vertex.x, vertex.y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n\r\nexport function moveVertex(v: Vertex, range: number, width: number, height: number): Vertex {\r\n    const direction = Math.random() * 2 * Math.PI;\r\n    const distance = Math.random() * range;\r\n\r\n    let x = v.x + Math.floor(Math.cos(direction) * distance);\r\n    x = Math.max(0, Math.min(x, width));\r\n\r\n    let y = v.y + Math.floor(Math.sin(direction) * distance);\r\n    y = Math.max(0, Math.min(y, height));\r\n\r\n    const movedVertex: Vertex = {\r\n        x: x,\r\n        y: y\r\n    };\r\n\r\n    return movedVertex; \r\n  };\r\n\r\n  export function copyPolygon(p: Polygon): Polygon {\r\n      const vertices: Vertex[] = [];\r\n      p.vertices.forEach((vertex: Vertex) => {\r\n          let v = {...vertex};\r\n          vertices.push(v);\r\n      });\r\n\r\n      const polygon = {\r\n          vertices: vertices,\r\n          color: [...p.color]\r\n      };\r\n\r\n      return polygon;\r\n  }\r\n\r\n export function getLimitDimensions(width: number, height: number, limit?: number): {width: number, height: number, ratio: number} {\r\n    const ratioImage = height / width;\r\n    if (limit && (width >= limit || height >= limit)) {        \r\n        if (ratioImage > 1) {\r\n            return { width: Math.round(limit / ratioImage), height: limit, ratio: ratioImage };\r\n        }\r\n        else {\r\n            return { width: limit, height: Math.round(limit * ratioImage), ratio: ratioImage};\r\n        }\r\n        \r\n    }\r\n    return { width: width, height: height, ratio: ratioImage};\r\n}","import './InputImageUrl.css';\r\nimport React, {useState} from 'react';\r\n\r\nexport interface InputImageProps {\r\n    start: (url: string) => void;\r\n    stop: () => void;\r\n    links: {name: string, link: string}[] ;\r\n    isStopped: boolean;\r\n    className: string;\r\n};\r\n\r\nexport function InputImageUrl({start, stop, links, isStopped, className}: InputImageProps) {\r\n    const [url, setUrl] = useState<string>('https://my-image-url');\r\n  \r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      start && start(url);\r\n    }\r\n\r\n    const onStop = () => {\r\n        stop && stop();\r\n    }\r\n\r\n    const generateLinks = (): JSX.Element[] =>  {\r\n        const linkElements: JSX.Element[] = [];\r\n        links.forEach((link => {\r\n            const elem: JSX.Element = <button key={link.name} className=\"link\" value={link.link} onClick={e => {setUrl(e.currentTarget.value);}} > {link.name} </button>; \r\n            linkElements.push(elem);\r\n        }))\r\n        return linkElements;\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div>\r\n                <form onSubmit={onSubmit}>\r\n                    <input type=\"text\" name=\"image-url\" value={url} onChange={e => setUrl(e.target.value)} />\r\n                    <button disabled={!isStopped} type=\"submit\" id=\"start-button\">Start</button>        \r\n                    <button disabled={isStopped} type=\"button\" id=\"stop-button\" onClick={onStop}>Stop</button>        \r\n                </form>                \r\n            </div>\r\n            <div>\r\n                {generateLinks()}\r\n            </div>            \r\n        </div>\r\n    )\r\n} ","import './RendererFromUrl.css';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { getLimitDimensions } from './common/geometry';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    url: string;\r\n    limit?: number;\r\n    onImageDrawn: (img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => void;\r\n    onLoadingError: () => void;\r\n    className: string;\r\n    classNameOnError: string;\r\n};\r\n\r\nexport function RendererFromUrl({ name, url, limit, onImageDrawn, onLoadingError, className, classNameOnError }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [isErrorOnLoad, setError] = useState<boolean>(false);\r\n    const [imageUrl, setImageUrl] = useState<string>(\"\"); \r\n\r\n    useEffect(() => {       \r\n        if (url !== imageUrl)\r\n        {\r\n            setImageUrl(url);\r\n            setError(false);\r\n            const canvas = canvasRef.current as HTMLCanvasElement;\r\n            if (canvas) {\r\n                const ctx = canvas.getContext('2d');\r\n            \r\n                const img = new Image();\r\n                img.crossOrigin = \"Anonymous\";  // This enables CORS\r\n                img.onload = () => {\r\n                    const { width, height } = getLimitDimensions(img.width, img.height, limit);            \r\n                    if (width === 0 || height === 0) {\r\n                        console.error(\"Fail to load the image\");\r\n                    }\r\n        \r\n                    canvas.width = width;\r\n                    canvas.height = height;\r\n        \r\n                    if (ctx) {\r\n                        ctx.drawImage(img, 0, 0, width, height);\r\n                        onImageDrawn?.(img, width, height);\r\n                    }\r\n                    else {\r\n                        console.error(\"ctx is null the image can not be loaded\");\r\n                    }                        \r\n                };\r\n                img.src = url;\r\n                img.onerror = () => {\r\n                    setError(true);\r\n                    onLoadingError();\r\n                }    \r\n            }\r\n        }         \r\n    }, [url, limit, onImageDrawn, onLoadingError, imageUrl]);\r\n\r\n    return (\r\n        <div>\r\n            {isErrorOnLoad &&\r\n                <div className={classNameOnError}>\r\n                <p className=\"error\">The image {url} could not be loaded. Try with another URL.</p>\r\n                </div> \r\n            }\r\n            <div className={className}>\r\n            <canvas id={name} ref={canvasRef} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\nimport {drawPolygon, Polygon} from \"./common/geometry\";\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    drawingSteps: Polygon[];\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, drawingSteps: Polygon[] = []): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    ctx.scale(ratioW, ratioH);\r\n    drawingSteps.forEach(shape => {\r\n        drawPolygon(ctx, shape);\r\n    })\r\n}\r\n\r\nexport function RendererFromDrawing({ name, width, height, ratioW, ratioH, drawingSteps, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, drawingSteps);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, drawingSteps]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    data: ImageData;\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, data: ImageData, canvas: HTMLCanvasElement): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.putImageData(data, 0, 0);\r\n    ctx.scale(ratioW, ratioH);        \r\n    ctx.drawImage(canvas, 0, 0);    \r\n}\r\n\r\nexport function RendererFromData({ name, width, height, ratioW, ratioH, data, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, data, canvas);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, data]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","export interface GAInfoProps {\r\n    generation: number;  \r\n    fitness: number;\r\n    ssim: number;\r\n    pixelDiff: number;\r\n    idBest: number;\r\n    elapsedTimeForGeneration: number;\r\n    notImprovingSince: number;\r\n    className: string;\r\n};\r\n\r\nexport function GAInformation({ generation, fitness, ssim, pixelDiff, idBest, elapsedTimeForGeneration, notImprovingSince, className }: GAInfoProps) {\r\n    return (\r\n        <div className={className}>\r\n          <p> Generation: {generation} \r\n            {notImprovingSince > 0 && <span> (not improving since {notImprovingSince}) </span>}\r\n        </p>\r\n          <p> Simulation time: {elapsedTimeForGeneration} seconds </p>\r\n          <p> Fitness: {fitness} </p>\r\n          <p> - SSIM: {ssim} </p>\r\n          <p> - Pixel Diff: {pixelDiff} </p>\r\n          <p> idBest: {idBest} </p>\r\n        </div>\r\n    );    \r\n}","import './InputRange.css';\r\nimport { useState } from \"react\";\r\n\r\ninterface InputRangeProps {\r\n    defaultVal: number;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    label: string;\r\n    id: string;\r\n    name: string;\r\n    onChange: (val: number) => void\r\n}\r\n\r\nexport function InputRange({defaultVal, min, max, step, label, id, name, onChange}: InputRangeProps) {\r\n    const [value, setValue] = useState<number>(defaultVal);\r\n\r\n    const handleOnChange = function(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const newValue = e.target.valueAsNumber; \r\n        setValue(newValue);\r\n        onChange(newValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputrange-wrapper\">\r\n            <label className=\"inputrange-one\">{label}</label>\r\n            <input className=\"inputrange-two\" type=\"range\" id={id} name={name} min={min} max={max} step={step} value={value} onChange={handleOnChange}/>\r\n            <span className=\"inputrange-three\">{value}</span>\r\n        </div>        \r\n    )\r\n}","import './GAConfiguration.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Configuration } from \"./common/ga\";\r\nimport { InputRange } from \"./InputRange\"\r\n\r\nexport interface InputRangeProps {\r\n    population: number;\r\n    parentSelectionStrategy: string;\r\n    selectCutoff: number;\r\n    tournamentSize: number;\r\n    keepPreviousRatio: number;\r\n    newIndividualRatio: number;\r\n    crossoverParentRatio: number;\r\n    mutationRate: number;\r\n    crossoverStrategy: string;\r\n    vertexMovement: number;\r\n    colorModificationRate: number;\r\n    enableSsim: boolean;\r\n    enablePixelDiff: boolean;\r\n    ratioSsim: number;\r\n    ratioPixelDiff: number;\r\n    enableTransparency: boolean;\r\n    nbVertex: number;\r\n    nbPolygons: number;\r\n    onValuesChange: (configuration: Configuration) => void;\r\n    className: string;\r\n}\r\n\r\nexport function GAConfiguration({\r\n    population,\r\n    parentSelectionStrategy,\r\n    selectCutoff,\r\n    tournamentSize,\r\n    keepPreviousRatio,\r\n    newIndividualRatio,\r\n    crossoverParentRatio,\r\n    mutationRate,\r\n    crossoverStrategy,\r\n    vertexMovement,\r\n    colorModificationRate,\r\n    enableSsim,\r\n    enablePixelDiff,\r\n    ratioSsim,\r\n    ratioPixelDiff,\r\n    enableTransparency,\r\n    nbVertex,\r\n    nbPolygons,\r\n    onValuesChange, className} : InputRangeProps) {\r\n    \r\n        const [values, setValues] = useState<Configuration>({\r\n            population: population,\r\n            parentSelectionStrategy: parentSelectionStrategy,\r\n            selectCutoff: selectCutoff,\r\n            tournamentSize: tournamentSize,\r\n            keepPreviousRatio: keepPreviousRatio,\r\n            newIndividualRatio: newIndividualRatio,\r\n            crossoverParentRatio: crossoverParentRatio,\r\n            mutationRate: mutationRate,\r\n            crossoverStrategy: crossoverStrategy,\r\n            vertexMovement: vertexMovement,\r\n            colorModificationRate: colorModificationRate,\r\n            enableSsim: enableSsim,\r\n            enablePixelDiff: enablePixelDiff,\r\n            ratioSsim: ratioSsim,\r\n            ratioPixelDiff: ratioPixelDiff,\r\n            enableTransparency: enableTransparency,\r\n            nbVertex: nbVertex,\r\n            nbPolygons: nbPolygons\r\n        });\r\n\r\n    useEffect(() => {\r\n        onValuesChange(values);\r\n    }, [values, onValuesChange]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <h3> Genetic Algorithm </h3>\r\n            <InputRange id=\"ga-population\" name=\"ga-population\" label=\"Population\" min={10} max={300} defaultVal={values.population} step={1} onChange={v => setValues({...values, population: v})}/>\r\n            <InputRange id=\"ga-keep-previous\" name=\"ga-keep-previous\" label=\"Keep previous individual\" min={0} max={1} defaultVal={values.keepPreviousRatio} step={0.05}onChange={v => setValues({...values, keepPreviousRatio: v})}/>\r\n            <InputRange id=\"ga-new-individual\" name=\"ga-new-individual\" label=\"Generate new individual\" min={0} max={1} defaultVal={values.newIndividualRatio} step={0.05} onChange={v => setValues({...values, newIndividualRatio: v})}/>\r\n            \r\n            <div>\r\n                <span><b>Parent selection strategy</b></span>\r\n                <div className=\"ga-strategy-div\">\r\n                    <label className=\"ga-strategy-label\" htmlFor=\"strategy-tournament\">Tournament <br/>\r\n                        <input type=\"radio\" id=\"strategy-tournament\" name=\"parentstrategy\" value=\"tournament\" checked={values.parentSelectionStrategy === \"tournament\"} onChange={v =>{setValues({...values, parentSelectionStrategy: v.target.value})}}/>\r\n                    </label> \r\n\r\n                    <label className=\"ga-strategy-label\" htmlFor=\"strategy-fortunewheel\">Fortune Wheel <br/>\r\n                        <input type=\"radio\" id=\"strategy-fortunewheel\" name=\"parentstrategy\" value=\"fortunewheel\" checked={values.parentSelectionStrategy === \"fortunewheel\"} onChange={v =>{setValues({...values, parentSelectionStrategy: v.target.value})}}/>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n\r\n            {values.parentSelectionStrategy === \"tournament\" &&\r\n                <InputRange id=\"ga-selection-cutoff\" name=\"ga-selection-cutoff\" label=\"Selection cutoff\" min={0} max={1} defaultVal={values.selectCutoff} step={0.05} onChange={v => setValues({...values, selectCutoff: v})}/>                \r\n            }\r\n\r\n            {values.parentSelectionStrategy === \"tournament\" &&\r\n                <InputRange id=\"ga-tournament-size\" name=\"ga-tournament-size\" label=\"Tournament size\" min={1} max={Math.round(values.selectCutoff * values.population)} defaultVal={values.tournamentSize} step={1} onChange={v => setValues({...values, tournamentSize: v})}/>\r\n            }\r\n\r\n            <InputRange id=\"ga-crossover-parent\" name=\"ga-crossover-parent\" label=\"Cross over main parent ratio\" min={0} max={1} defaultVal={values.crossoverParentRatio} step={0.05} onChange={v => setValues({...values, crossoverParentRatio: v})}/>\r\n            <div>\r\n                <span><b>Crossover strategy</b></span>\r\n                <div className=\"ga-strategy-div\">\r\n                    <label className=\"ga-strategy-label\" htmlFor=\"strategy-polygon\">Polygons <br/>\r\n                        <input type=\"radio\" id=\"strategy-polygon\" name=\"strategy\" value=\"polygon\" checked={values.crossoverStrategy === \"polygon\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                    </label> \r\n\r\n                    <label className=\"ga-strategy-label\" htmlFor=\"strategy-vertex\">Vertex <br/>\r\n                        <input type=\"radio\" id=\"strategy-vertex\" name=\"strategy\" value=\"vertex\" checked={values.crossoverStrategy === \"vertex\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                    </label>\r\n\r\n                    <label className=\"ga-strategy-label\" htmlFor=\"strategy-data\">Data <br/>\r\n                        <input type=\"radio\" id=\"strategy-data\" name=\"strategy\" value=\"data\" checked={values.crossoverStrategy === \"data\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <InputRange id=\"ga-mutation\" name=\"ga-mutation\" label=\"Mutation rate\" min={0} max={1} defaultVal={values.mutationRate} step={0.05} onChange={v => setValues({...values, mutationRate: v})}/>\r\n            <InputRange id=\"ga-vertex-movement\" name=\"ga-vertex-movement\" label=\"Vertex movement\" min={0} max={0.5} defaultVal={values.vertexMovement} step={0.05} onChange={v => setValues({...values, vertexMovement: v})}/>\r\n            <InputRange id=\"ga-color-modification\" name=\"ga-color-modification\" label=\"Color modification\" min={0} max={1} defaultVal={values.colorModificationRate} step={0.05} onChange={v => setValues({...values, colorModificationRate: v})}/>\r\n\r\n            <h3> Image rendering </h3>\r\n            <div>\r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-ssim\">SSIM:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-ssim\" value=\"ssim\" checked={values.enableSsim} onChange={v =>{setValues({...values, enableSsim: v.target.checked})}}/>\r\n            </div>\r\n            <div>            \r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-pixeldiff\">Pixel differenciation:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-pixeldiff\" value=\"pixeldiff\" checked={values.enablePixelDiff} onChange={v => setValues({...values, enablePixelDiff: v.target.checked})}/>\r\n            </div>\r\n            {values.enableSsim && values.enablePixelDiff &&\r\n                <div>\r\n                    <InputRange id=\"ga-ssim-ratio\" name=\"ga-ssim-ratio\" label=\"Ratio Ssim\" min={0} max={10} defaultVal={values.ratioSsim} step={1} onChange={v => setValues({...values, ratioSsim: v})}/>\r\n                    <InputRange id=\"ga-pixldiff-ratio\" name=\"ga-pixldiff-ration\" label=\"Ratio Pixel\" min={0} max={10} defaultVal={values.ratioPixelDiff} step={1} onChange={v => setValues({...values, ratioPixelDiff: v})}/>            \r\n                </div>\r\n            }\r\n           \r\n            <div>   \r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-transparency\">Transparency:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-transparency\" value=\"transparency\" checked={values.enableTransparency} onChange={v => setValues({...values, enableTransparency: v.target.checked})}/>\r\n            </div>\r\n\r\n            <InputRange id=\"ga-vertex\" name=\"ga-vertex\" label=\"Vertex\" min={3} max={10} defaultVal={values.nbVertex} step={1} onChange={v => setValues({...values, nbVertex: v})}/>\r\n            <InputRange id=\"ga-vertices\" name=\"ga-vertices\" label=\"Vertices\" min={50} max={500} defaultVal={values.nbPolygons} step={1} onChange={v => setValues({...values, nbPolygons: v})}/>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport {useState, useCallback, useEffect} from \"react\";\r\n\r\nimport MyWorker from './test.worker';\r\nimport {AGworkerIn, AGworkerOut} from \"./common/communication\";\r\nimport { getLimitDimensions, Image } from './common/geometry';\r\nimport { InputImageUrl } from './InputImageUrl';\r\nimport { RendererFromUrl } from './RendererFromUrl';\r\nimport { RendererFromDrawing } from './RendererFromDrawing';\r\nimport { RendererFromData } from './RendererFromData';\r\nimport { GAInformation } from './GAInformation';\r\nimport { GAConfiguration } from './GAConfiguration';\r\nimport { Configuration } from './common/ga';\r\n\r\nfunction App() {\r\n\r\n  const limitImageSize = 256;\r\n  const sampleLnks: {name: string, link: string}[] = [\r\n    { \r\n      name: \"Einstein\",\r\n      link: \"https://raw.githubusercontent.com/obartra/ssim/master/spec/samples/einstein/Q1.gif\"\r\n    },\r\n    { \r\n      name: \"Joconde\",\r\n      link: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/390px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg\"\r\n    },\r\n    { \r\n      name: \"Photographe\",\r\n      link: \"https://i.picsum.photos/id/823/420/560.jpg?hmac=H6lJE4fRi96MxgWYyd3_79WbmObu-jJj7Zo40p5I-nU\"\r\n    },\r\n    { \r\n      name: \"Random\",\r\n      link: \"https://picsum.photos/420/560\"\r\n    }       \r\n  ];\r\n\r\n  const [configuration, setConfiguration] = useState<Configuration>({\r\n    population: 50,\r\n    parentSelectionStrategy: \"tournament\",\r\n    selectCutoff: 0.2,\r\n    tournamentSize: 3,\r\n    keepPreviousRatio: 0.15,\r\n    newIndividualRatio: 0.05,\r\n    crossoverParentRatio: 0.7,\r\n    mutationRate: 0.2,\r\n    crossoverStrategy: \"polygon\",\r\n    vertexMovement: 0.1,\r\n    colorModificationRate: 0.1,\r\n    enableSsim: true,\r\n    enablePixelDiff: false,\r\n    ratioSsim: 1,\r\n    ratioPixelDiff: 1,\r\n    enableTransparency: true,\r\n    nbVertex: 3,\r\n    nbPolygons: 125\r\n  });\r\n\r\n  const [simulation, setSimulation] = useState<AGworkerOut>({\r\n    isRunning: false,\r\n    best: {\r\n      genes: [],\r\n      fitness: 0,\r\n      ssim: 0,\r\n      pixelDiff: 0,\r\n      diff: undefined,\r\n      id: 0,\r\n      probability: 0,\r\n      phenotype: []\r\n    },\r\n    population: [],\r\n    generation: 0,\r\n    elapsedTime: 0,\r\n    notImprovingSince: 0\r\n  });\r\n\r\n  const [response, setResponse] = useState<AGworkerOut | undefined>(undefined);\r\n\r\n  const [imageUrl, setUrl] = useState<string>(\"\");\r\n  const [imageFromUrl, setImage] = useState<Image>({\r\n    image: null, renderedWidth: 0, renderedHeight: 0, ratioOffscreenWidth: 0, ratioOffscreenHeight: 0, offscreenWidth: 0, offscreenHeight: 0, limitOffscreen: 0});\r\n\r\n  const [myWorkerInstance, setWorker] = useState<Worker | null>(null); \r\n  const [isStopped, setStop] = useState<boolean>(true);\r\n\r\n  const handleResponse = useCallback((e: MessageEvent<any>) => {      \r\n    const response: AGworkerOut = e.data as AGworkerOut;\r\n    setResponse(response);             \r\n  }, []);\r\n\r\n  const handleStart = useCallback((url :string) => {    \r\n    const newWorker = new MyWorker();    \r\n    setWorker(newWorker);\r\n\r\n    setStop(false);      \r\n    setUrl(url);    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (myWorkerInstance) {\r\n      console.log(\"Add listener to worker\");\r\n      myWorkerInstance.addEventListener('message', handleResponse);\r\n    }    \r\n  }, [myWorkerInstance, handleResponse]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!myWorkerInstance || !imageFromUrl.image || !response || isStopped) {\r\n      return;\r\n    }\r\n\r\n    //if ((simulation.generation + 1) === response.generation) {\r\n      setSimulation(response);\r\n      //console.log(`Set response of generation ${response.generation}`);\r\n\r\n      //Send next message\r\n      const message: AGworkerIn = {\r\n        isRunning: response.isRunning,\r\n        image: imageFromUrl.image, \r\n        configuration: configuration,\r\n        notImprovingSince: response.notImprovingSince,\r\n        best: response.best,\r\n        population: response.population,\r\n        generation: response.generation,\r\n        renderingHeight: imageFromUrl.offscreenHeight,\r\n        renderingWidth: imageFromUrl.offscreenWidth\r\n      };\r\n\r\n      myWorkerInstance.postMessage(message);\r\n    /*\r\n    }\r\n    else {\r\n      console.warn(`Try to set response of generation ${response.generation} to simulation of generation ${simulation.generation}`);\r\n    } \r\n    */       \r\n  }, [myWorkerInstance, response, imageFromUrl, configuration, isStopped])\r\n\r\n  const handleStop = useCallback(() => {\r\n    // Reset simulation\r\n    if (myWorkerInstance) {\r\n      myWorkerInstance.terminate();\r\n      setSimulation({\r\n        isRunning: false,\r\n        best: {\r\n          genes: [],\r\n          fitness: 0,\r\n          ssim: 0,\r\n          pixelDiff: 0,\r\n          diff: undefined,\r\n          id: 0,\r\n          probability: 0,\r\n          phenotype: []\r\n        },\r\n        population: [],\r\n        generation: 0,\r\n        elapsedTime: 0,\r\n        notImprovingSince: 0\r\n      });\r\n      setUrl(\"\");  \r\n      setStop(true); \r\n      setResponse(undefined);        \r\n    }    \r\n  }, [myWorkerInstance]);\r\n\r\n  const handleUrlImageDrawn = useCallback((img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => {\r\n    const imageWidth: number = img.width as number;\r\n    const imageHeight: number = img.height as number;\r\n\r\n    const simDimensions = getLimitDimensions(imageWidth, imageHeight, 64);  \r\n    const ratioW = simDimensions.width / renderedWidth;\r\n    const ratioH = simDimensions.height / renderedHeight; \r\n\r\n    const canvas = new OffscreenCanvas(simDimensions.width, simDimensions.height); \r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {      \r\n      // Rescale the image for the simulation\r\n      ctx.scale(ratioW, ratioH);\r\n      ctx.drawImage(img, 0, 0, renderedWidth, renderedHeight);\r\n      const image = ctx.getImageData(0, 0, simDimensions.width, simDimensions.height);\r\n\r\n      setImage({\r\n        image: image,\r\n        renderedWidth: renderedWidth,\r\n        renderedHeight: renderedHeight,\r\n        offscreenWidth: simDimensions.width,\r\n        offscreenHeight: simDimensions.height,\r\n        ratioOffscreenWidth: ratioW,\r\n        ratioOffscreenHeight: ratioH,\r\n        limitOffscreen: 64\r\n      });  \r\n\r\n      if (myWorkerInstance && image) {\r\n        //Send next message\r\n        const message: AGworkerIn = {\r\n          isRunning: simulation.isRunning,\r\n          image: image, \r\n          configuration: configuration,\r\n          notImprovingSince: simulation.notImprovingSince,\r\n          best: simulation.best,\r\n          population: simulation.population,\r\n          generation: simulation.generation,\r\n          renderingHeight: simDimensions.width,\r\n          renderingWidth: simDimensions.height\r\n        };\r\n\r\n        console.log(\"post message for first generation\");\r\n        myWorkerInstance.postMessage(message);\r\n      }     \r\n\r\n    } \r\n    else {\r\n      console.error(\"ctx from url image for resizing could not be created\");\r\n    }   \r\n  }, [simulation, myWorkerInstance, configuration]);\r\n\r\n  const handleLoadingImageError = useCallback(() => {\r\n    setStop(true);  \r\n  }, []);\r\n\r\n  const handleValuesChange = useCallback((config: Configuration) => {   \r\n    setConfiguration(config);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"wrapper\">       \r\n      <InputImageUrl className=\"one\" links={sampleLnks} start={handleStart} stop={handleStop} isStopped={isStopped}/>\r\n      { imageUrl &&\r\n        <RendererFromUrl className=\"two\" classNameOnError=\"twoExpanded\" name={\"original-image\"} onImageDrawn={handleUrlImageDrawn} onLoadingError={handleLoadingImageError} limit={limitImageSize} url={imageUrl}/>\r\n      }\r\n      { imageFromUrl.image && !isStopped &&\r\n        <RendererFromDrawing className=\"three\" name={\"generated-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} drawingSteps={simulation.best.phenotype}/>        \r\n      }\r\n      { simulation.best.diff && !isStopped &&\r\n        <RendererFromData className=\"four\" name={\"diff-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} data={simulation.best.diff}/>        \r\n      }\r\n      { !isStopped &&\r\n        <GAInformation \r\n          className=\"five\" \r\n          generation={simulation.generation} \r\n          fitness={simulation.best.fitness} \r\n          ssim={simulation.best.ssim}\r\n          pixelDiff={simulation.best.pixelDiff}\r\n          idBest={simulation.best.id} \r\n          elapsedTimeForGeneration={simulation.elapsedTime}\r\n          notImprovingSince={simulation.notImprovingSince}\r\n        />\r\n      }            \r\n      {\r\n        isStopped &&\r\n        <GAConfiguration\r\n          population={configuration.population}\r\n          parentSelectionStrategy={configuration.parentSelectionStrategy}\r\n          selectCutoff={configuration.selectCutoff}\r\n          tournamentSize={configuration.tournamentSize}\r\n          keepPreviousRatio={configuration.keepPreviousRatio}\r\n          newIndividualRatio={configuration.newIndividualRatio}\r\n          crossoverParentRatio={configuration.crossoverParentRatio}\r\n          mutationRate={configuration.mutationRate}\r\n          crossoverStrategy={configuration.crossoverStrategy}\r\n          vertexMovement={configuration.vertexMovement}\r\n          colorModificationRate={configuration.colorModificationRate}\r\n          enableSsim={configuration.enableSsim}\r\n          enablePixelDiff={configuration.enablePixelDiff}\r\n          ratioSsim={configuration.ratioSsim}\r\n          ratioPixelDiff={configuration.ratioPixelDiff}\r\n          enableTransparency={configuration.enableTransparency}\r\n          nbVertex={configuration.nbVertex}\r\n          nbPolygons={configuration.nbPolygons}\r\n          className=\"five\" \r\n          onValuesChange={handleValuesChange}\r\n        />\r\n      }      \r\n    </div>            \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}