{"version":3,"sources":["test.worker.ts","common/geometry.ts","InputImageUrl.tsx","RendererFromUrl.tsx","RendererFromDrawing.tsx","RendererFromData.tsx","GAInformation.tsx","InputRange.tsx","GAConfiguration.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Worker_fn","Worker","getRGBAFromColor","c","length","drawPolygon","ctx","polygon","vertices","fillStyle","color","beginPath","vertex","moveTo","x","y","i","lineTo","closePath","fill","getLimitDimensions","width","height","limit","ratioImage","Math","round","ratio","InputImageUrl","start","stop","isStopped","className","useState","url","setUrl","onSubmit","e","preventDefault","type","name","value","onChange","target","disabled","id","onClick","RendererFromUrl","onImageDrawn","onLoadingError","classNameOnError","canvasRef","useRef","isErrorOnLoad","setError","useEffect","canvas","current","getContext","img","Image","crossOrigin","onload","console","error","drawImage","src","onerror","ref","RendererFromDrawing","ratioW","ratioH","drawingSteps","clearRect","fillRect","scale","forEach","shape","draw","image","getImageData","RendererFromData","data","putImageData","GAInformation","generation","fitness","ssim","pixelDiff","idBest","elapsedTimeForGeneration","notImprovingSince","InputRange","defaultVal","min","max","step","label","setValue","newValue","valueAsNumber","GAConfiguration","population","selectCutoff","keepPreviousRatio","newIndividualRatio","crossoverParentRatio","mutationRate","vertexMovement","colorModificationRate","enableSsim","enablePixelDiff","ratioSsim","ratioPixelDiff","enableTransparency","nbVertex","nbPolygons","onValuesChange","values","setValues","log","JSON","stringify","v","htmlFor","checked","App","configuration","setConfiguration","isRunning","best","genes","diff","undefined","probability","phenotype","elapsedTime","simulation","setSimulation","imageUrl","renderedWidth","renderedHeight","ratioOffscreenWidth","ratioOffscreenHeight","offscreenWidth","offscreenHeight","limitOffscreen","imageFromUrl","setImage","myWorkerInstance","setWorker","setStop","handleStart","useCallback","handleStop","terminate","handleUrlImageDrawn","simDimensions","OffscreenCanvas","MyWorker","handleLoadingImageError","handleGeneratedImageDrawn","message","renderingHeight","renderingWidth","postMessage","handleValuesChange","config","addEventListener","response","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.432cedfc.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/test.worker.8798f57e.js\");\n}\n","import { Context } from \"vm\";\r\n\r\nexport interface Rect {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    color: number[];\r\n}\r\n\r\nexport interface Vertex {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Polygon {\r\n    vertices: Vertex[];\r\n    color: number[];\r\n}\r\n\r\nexport interface Image {\r\n    image: ImageData|null;\r\n    renderedWidth: number;\r\n    renderedHeight: number;\r\n    offscreenWidth: number;\r\n    offscreenHeight: number;\r\n    ratioOffscreenWidth: number; // ratio to limit\r\n    ratioOffscreenHeight: number; // ratio to limit\r\n    limitOffscreen: number;\r\n}\r\n\r\nexport function getRGBAFromColor(c: number[]): string {\r\n    let color = \"rgb(0, 0, 0\";\r\n    if (c.length === 3) {\r\n        color = `rgb(${c[0]},${c[1]},${c[2]})`;\r\n    }\r\n    else {\r\n        color = `rgba(${c[0]},${c[1]},${c[2]},${c[3]})`\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function drawRectangle(ctx: Context, rect: Rect) {\r\n    if (!ctx ) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle =  getRGBAFromColor(rect.color);;\r\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nexport function drawPolygon(ctx: Context, polygon: Polygon) {\r\n    if (!ctx || polygon.vertices.length === 0) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle = getRGBAFromColor(polygon.color);\r\n    ctx.beginPath();\r\n\r\n    let vertex = polygon.vertices[0];\r\n    ctx.moveTo(vertex.x, vertex.y);\r\n    for(let i = 1; i < polygon.vertices.length; i++) {\r\n        vertex = polygon.vertices[i];\r\n        ctx.lineTo(vertex.x, vertex.y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n\r\nexport function moveVertex(v: Vertex, range: number, width: number, height: number): Vertex {\r\n    const direction = Math.random() * 2 * Math.PI;\r\n    const distance = Math.random() * range;\r\n\r\n    let x = v.x + Math.floor(Math.cos(direction) * distance);\r\n    x = Math.max(0, Math.min(x, width));\r\n\r\n    let y = v.y + Math.floor(Math.sin(direction) * distance);\r\n    y = Math.max(0, Math.min(y, height));\r\n\r\n    const movedVertex: Vertex = {\r\n        x: x,\r\n        y: y\r\n    };\r\n\r\n    return movedVertex; \r\n  };\r\n\r\n  export function copyPolygon(p: Polygon): Polygon {\r\n      const vertices: Vertex[] = [];\r\n      p.vertices.forEach((vertex: Vertex) => {\r\n          let v = {...vertex};\r\n          vertices.push(v);\r\n      });\r\n\r\n      const polygon = {\r\n          vertices: vertices,\r\n          color: [...p.color]\r\n      };\r\n\r\n      return polygon;\r\n  }\r\n\r\n export function getLimitDimensions(width: number, height: number, limit?: number): {width: number, height: number, ratio: number} {\r\n    const ratioImage = height / width;\r\n    if (limit && (width >= limit || height >= limit)) {        \r\n        if (ratioImage > 1) {\r\n            return { width: Math.round(limit / ratioImage), height: limit, ratio: ratioImage };\r\n        }\r\n        else {\r\n            return { width: limit, height: Math.round(limit * ratioImage), ratio: ratioImage};\r\n        }\r\n        \r\n    }\r\n    return { width: width, height: height, ratio: ratioImage};\r\n}","import './InputImageUrl.css';\r\nimport React, {useState} from 'react';\r\n\r\nexport interface InputImageProps {\r\n    start: (url: string) => void;\r\n    stop: () => void;\r\n    isStopped: boolean;\r\n    className: string;\r\n};\r\n\r\nexport function InputImageUrl({start, stop, isStopped, className}: InputImageProps) {\r\n    const [url, setUrl] = useState<string>('https://my-image-url');\r\n  \r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      start && start(url);\r\n    }\r\n\r\n    const onStop = () => {\r\n        stop && stop();\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\" name=\"image-url\" value={url} onChange={e => setUrl(e.target.value)} />\r\n                <button disabled={!isStopped} type=\"submit\" id=\"start-button\">Start</button>                \r\n            </form>\r\n            <button disabled={isStopped} type=\"button\" id=\"stop-button\" onClick={onStop}>Stop</button>\r\n        </div>\r\n    )\r\n} ","import './RendererFromUrl.css';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { getLimitDimensions } from './common/geometry';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    url: string;\r\n    limit?: number;\r\n    onImageDrawn: (img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => void;\r\n    onLoadingError: () => void;\r\n    className: string;\r\n    classNameOnError: string;\r\n};\r\n\r\nexport function RendererFromUrl({ name, url, limit, onImageDrawn, onLoadingError, className, classNameOnError }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [isErrorOnLoad, setError] = useState<boolean>(false);\r\n\r\n    useEffect(() => {        \r\n        setError(false);\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        if (canvas) {\r\n            const ctx = canvas.getContext('2d');\r\n        \r\n            const img = new Image();\r\n            img.crossOrigin = \"Anonymous\";  // This enables CORS\r\n            img.onload = () => {\r\n                const { width, height } = getLimitDimensions(img.width, img.height, limit);            \r\n                if (width === 0 || height === 0) {\r\n                    console.error(\"Fail to load the image\");\r\n                }\r\n    \r\n                canvas.width = width;\r\n                canvas.height = height;\r\n    \r\n                if (ctx) {\r\n                    ctx.drawImage(img, 0, 0, width, height);\r\n                    onImageDrawn?.(img, width, height);\r\n                }\r\n                else {\r\n                    console.error(\"ctx is null the image can not be loaded\");\r\n                }                        \r\n            };\r\n            img.src = url;\r\n            img.onerror = () => {\r\n                setError(true);\r\n                onLoadingError();\r\n            }    \r\n        }\r\n    }, [url, limit, onImageDrawn, onLoadingError]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isErrorOnLoad &&\r\n                <div className={classNameOnError}>\r\n                <p className=\"error\">The image {url} could not be loaded. Try with another URL.</p>\r\n                </div> \r\n            }\r\n            <div className={className}>\r\n            <canvas id={name} ref={canvasRef} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\nimport {drawPolygon, Polygon} from \"./common/geometry\";\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    drawingSteps: Polygon[];\r\n    onImageDrawn: (img: ImageData) => void;\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, drawingSteps: Polygon[] = []): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    ctx.scale(ratioW, ratioH);\r\n    drawingSteps.forEach(shape => {\r\n        drawPolygon(ctx, shape);\r\n    })\r\n}\r\n\r\nexport function RendererFromDrawing({ name, width, height, ratioW, ratioH, drawingSteps, onImageDrawn, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, drawingSteps);            \r\n            const image = ctx.getImageData(0, 0, width, height);\r\n            onImageDrawn?.(image);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, drawingSteps, onImageDrawn]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    data: ImageData;\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, data: ImageData, canvas: HTMLCanvasElement): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.putImageData(data, 0, 0);\r\n    ctx.scale(ratioW, ratioH);        \r\n    ctx.drawImage(canvas, 0, 0);    \r\n}\r\n\r\nexport function RendererFromData({ name, width, height, ratioW, ratioH, data, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, data, canvas);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, data]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","export interface GAInfoProps {\r\n    generation: number;  \r\n    fitness: number;\r\n    ssim: number;\r\n    pixelDiff: number;\r\n    idBest: number;\r\n    elapsedTimeForGeneration: number;\r\n    notImprovingSince: number;\r\n    className: string;\r\n};\r\n\r\nexport function GAInformation({ generation, fitness, ssim, pixelDiff, idBest, elapsedTimeForGeneration, notImprovingSince, className }: GAInfoProps) {\r\n    return (\r\n        <div className={className}>\r\n          <p> Generation: {generation} \r\n            {notImprovingSince > 0 && <span> (not improving since {notImprovingSince}) </span>}\r\n        </p>\r\n          <p> Simulation time: {elapsedTimeForGeneration} seconds </p>\r\n          <p> Fitness: {fitness} </p>\r\n          <p> - SSIM: {ssim} </p>\r\n          <p> - Pixel Diff: {pixelDiff} </p>\r\n          <p> idBest: {idBest} </p>\r\n        </div>\r\n    );    \r\n}","import './InputRange.css';\r\nimport { useState } from \"react\";\r\n\r\ninterface InputRangeProps {\r\n    defaultVal: number;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    label: string;\r\n    id: string;\r\n    name: string;\r\n    onChange: (val: number) => void\r\n}\r\n\r\nexport function InputRange({defaultVal, min, max, step, label, id, name, onChange}: InputRangeProps) {\r\n    const [value, setValue] = useState<number>(defaultVal);\r\n\r\n    const handleOnChange = function(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const newValue = e.target.valueAsNumber; \r\n        setValue(newValue);\r\n        onChange(newValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputrange-wrapper\">\r\n            <label className=\"inputrange-one\">{label}</label>\r\n            <input className=\"inputrange-two\" type=\"range\" id={id} name={name} min={min} max={max} step={step} value={value} onChange={handleOnChange}/>\r\n            <span className=\"inputrange-three\">{value}</span>\r\n        </div>        \r\n    )\r\n}","import './GAConfiguration.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Configuration } from \"./common/ga\";\r\nimport { InputRange } from \"./InputRange\"\r\n\r\nexport interface InputRangeProps {\r\n    population: number;\r\n    selectCutoff: number;\r\n    keepPreviousRatio: number;\r\n    newIndividualRatio: number;\r\n    crossoverParentRatio: number;\r\n    mutationRate: number;\r\n    vertexMovement: number;\r\n    colorModificationRate: number;\r\n    enableSsim: boolean;\r\n    enablePixelDiff: boolean;\r\n    ratioSsim: number;\r\n    ratioPixelDiff: number;\r\n    enableTransparency: boolean;\r\n    nbVertex: number;\r\n    nbPolygons: number;\r\n    onValuesChange: (configuration: Configuration) => void;\r\n    className: string;\r\n}\r\n\r\nexport function GAConfiguration({\r\n    population,\r\n    selectCutoff,\r\n    keepPreviousRatio,\r\n    newIndividualRatio,\r\n    crossoverParentRatio,\r\n    mutationRate,\r\n    vertexMovement,\r\n    colorModificationRate,\r\n    enableSsim,\r\n    enablePixelDiff,\r\n    ratioSsim,\r\n    ratioPixelDiff,\r\n    enableTransparency,\r\n    nbVertex,\r\n    nbPolygons,\r\n    onValuesChange, className} : InputRangeProps) {\r\n    \r\n        const [values, setValues] = useState<Configuration>({\r\n            population: population,\r\n            selectCutoff: selectCutoff,\r\n            keepPreviousRatio: keepPreviousRatio,\r\n            newIndividualRatio: newIndividualRatio,\r\n            crossoverParentRatio: crossoverParentRatio,\r\n            mutationRate: mutationRate,\r\n            vertexMovement: vertexMovement,\r\n            colorModificationRate: colorModificationRate,\r\n            enableSsim: enableSsim,\r\n            enablePixelDiff: enablePixelDiff,\r\n            ratioSsim: ratioSsim,\r\n            ratioPixelDiff: ratioPixelDiff,\r\n            enableTransparency: enableTransparency,\r\n            nbVertex: nbVertex,\r\n            nbPolygons: nbPolygons\r\n        });\r\n\r\n    useEffect(() => {\r\n        console.log(\"use effect to update configuration \" + JSON.stringify(values));\r\n        onValuesChange(values);\r\n    }, [values, onValuesChange]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <h3> Genetic Algorithm </h3>\r\n            <InputRange id=\"ga-population\" name=\"ga-population\" label=\"Population\" min={10} max={300} defaultVal={values.population} step={1} onChange={v => setValues({...values, population: v})}/>\r\n            <InputRange id=\"ga-selection-cutoff\" name=\"ga-selection-cutoff\" label=\"Selection cutoff\" min={0} max={1} defaultVal={values.selectCutoff} step={0.1} onChange={v => setValues({...values, selectCutoff: v})}/>\r\n            <InputRange id=\"ga-keep-previous\" name=\"ga-keep-previous\" label=\"Keep previous individual\" min={0} max={1} defaultVal={values.keepPreviousRatio} step={0.1}onChange={v => setValues({...values, keepPreviousRatio: v})}/>\r\n            <InputRange id=\"ga-new-individual\" name=\"ga-new-individual\" label=\"Generate new individual\" min={0} max={1} defaultVal={values.newIndividualRatio} step={0.1} onChange={v => setValues({...values, newIndividualRatio: v})}/>\r\n            <InputRange id=\"ga-crossover-parent\" name=\"ga-crossover-parent\" label=\"Cross over main parent ratio\" min={0} max={1} defaultVal={values.crossoverParentRatio} step={0.1} onChange={v => setValues({...values, crossoverParentRatio: v})}/>\r\n            <InputRange id=\"ga-mutation\" name=\"ga-mutation\" label=\"Mutation rate\" min={0} max={1} defaultVal={values.mutationRate} step={0.1} onChange={v => setValues({...values, mutationRate: v})}/>\r\n            <InputRange id=\"ga-vertex-movement\" name=\"ga-vertex-movement\" label=\"Vertex movement\" min={0} max={32} defaultVal={values.vertexMovement} step={1} onChange={v => setValues({...values, vertexMovement: v})}/>\r\n            <InputRange id=\"ga-color-modification\" name=\"ga-color-modification\" label=\"Color modification\" min={0} max={1} defaultVal={values.colorModificationRate} step={0.1} onChange={v => setValues({...values, colorModificationRate: v})}/>\r\n\r\n            <h3> Image rendering </h3>\r\n            <div>\r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-ssim\">SSIM:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-ssim\" value=\"ssim\" checked={values.enableSsim} onChange={v =>{setValues({...values, enableSsim: v.target.checked})}}/>\r\n            </div>\r\n            <InputRange id=\"ga-ssim-ratio\" name=\"ga-ssim-ratio\" label=\"Ratio\" min={0} max={10} defaultVal={values.ratioSsim} step={1} onChange={v => setValues({...values, ratioSsim: v})}/>\r\n            \r\n            <div>            \r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-pixeldiff\">Pixel differenciation:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-pixeldiff\" value=\"pixeldiff\" checked={values.enablePixelDiff} onChange={v => setValues({...values, enablePixelDiff: v.target.checked})}/>\r\n            </div>\r\n            <InputRange id=\"ga-pixldiff-ratio\" name=\"ga-pixldiff-ration\" label=\"Ratio\" min={0} max={10} defaultVal={values.ratioPixelDiff} step={1} onChange={v => setValues({...values, ratioPixelDiff: v})}/>\r\n            \r\n            <div>   \r\n                <label className=\"gaconfiguration-one\" htmlFor=\"ga-transparency\">Transparency:</label>\r\n                <input className=\"gaconfiguration-three\" type=\"checkbox\" id=\"ga-transparency\" value=\"transparency\" checked={values.enableTransparency} onChange={v => setValues({...values, enableTransparency: v.target.checked})}/>\r\n            </div>\r\n\r\n            <InputRange id=\"ga-vertex\" name=\"ga-vertex\" label=\"Vertex\" min={3} max={10} defaultVal={values.nbVertex} step={1} onChange={v => setValues({...values, nbVertex: v})}/>\r\n            <InputRange id=\"ga-vertices\" name=\"ga-vertices\" label=\"Vertices\" min={50} max={500} defaultVal={values.nbPolygons} step={1} onChange={v => setValues({...values, nbPolygons: v})}/>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport {useState, useCallback, useEffect} from \"react\";\r\n\r\nimport MyWorker from './test.worker';\r\nimport {AGworkerIn, AGworkerOut} from \"./common/communication\";\r\nimport { getLimitDimensions, Image } from './common/geometry';\r\nimport { InputImageUrl } from './InputImageUrl';\r\nimport { RendererFromUrl } from './RendererFromUrl';\r\nimport { RendererFromDrawing } from './RendererFromDrawing';\r\nimport { RendererFromData } from './RendererFromData';\r\nimport { GAInformation } from './GAInformation';\r\nimport { GAConfiguration } from './GAConfiguration';\r\nimport { Configuration } from './common/ga';\r\n\r\nfunction App() {\r\n\r\n  const limitImageSize = 256;\r\n\r\n  const [configuration, setConfiguration] = useState<Configuration>({\r\n    population: 0,\r\n    selectCutoff: 0,\r\n    keepPreviousRatio: 0,\r\n    newIndividualRatio: 0,\r\n    crossoverParentRatio: 0,\r\n    mutationRate: 0,\r\n    vertexMovement: 0,\r\n    colorModificationRate: 0,\r\n    enableSsim: true,\r\n    enablePixelDiff: true,\r\n    ratioSsim: 0,\r\n    ratioPixelDiff: 0,\r\n    enableTransparency: true,\r\n    nbVertex: 0,\r\n    nbPolygons: 0\r\n  });\r\n\r\n  const [simulation, setSimulation] = useState<AGworkerOut>({\r\n    isRunning: false,\r\n    best: {\r\n      genes: [],\r\n      fitness: 0,\r\n      ssim: 0,\r\n      pixelDiff: 0,\r\n      diff: undefined,\r\n      id: 0,\r\n      probability: 0,\r\n      phenotype: []\r\n    },\r\n    population: [],\r\n    generation: 0,\r\n    elapsedTime: 0,\r\n    notImprovingSince: 0\r\n  });\r\n\r\n  const [imageUrl, setUrl] = useState<string>(\"\");\r\n  //const [imageUrl, setUrl] = useState<string>(\"https://raw.githubusercontent.com/obartra/ssim/master/spec/samples/einstein/Q1.gif\");\r\n  //const [imageUrl, setUrl] = useState<string>(\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/390px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg\");\r\n  //https://i.picsum.photos/id/823/420/560.jpg?hmac=H6lJE4fRi96MxgWYyd3_79WbmObu-jJj7Zo40p5I-nU\r\n  //const [imageFromUrl, setImage] = useState<ImageData|null>(null);\r\n  \r\n  const [imageFromUrl, setImage] = useState<Image>({\r\n    image: null, renderedWidth: 0, renderedHeight: 0, ratioOffscreenWidth: 0, ratioOffscreenHeight: 0, offscreenWidth: 0, offscreenHeight: 0, limitOffscreen: 0});\r\n\r\n  const [myWorkerInstance, setWorker] = useState<Worker | null>(null); \r\n  const [isStopped, setStop] = useState<boolean>(true);\r\n\r\n  const handleStart = useCallback((url :string) => {\r\n    setUrl(url);    \r\n  }, []);\r\n\r\n  const handleStop = useCallback(() => {\r\n    setStop(true); \r\n    setUrl(\"\");\r\n\r\n    // Reset simulation\r\n    if (myWorkerInstance) {\r\n      myWorkerInstance.terminate();\r\n      setSimulation({\r\n        isRunning: false,\r\n        best: {\r\n          genes: [],\r\n          fitness: 0,\r\n          ssim: 0,\r\n          pixelDiff: 0,\r\n          diff: undefined,\r\n          id: 0,\r\n          probability: 0,\r\n          phenotype: []\r\n        },\r\n        population: [],\r\n        generation: 0,\r\n        elapsedTime: 0,\r\n        notImprovingSince: 0\r\n      });\r\n    }    \r\n  }, [myWorkerInstance]);\r\n\r\n  const handleUrlImageDrawn = useCallback((img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => {\r\n    const imageWidth: number = img.width as number;\r\n    const imageHeight: number = img.height as number;\r\n\r\n    const simDimensions = getLimitDimensions(imageWidth, imageHeight, 64);  \r\n    const ratioW = simDimensions.width / renderedWidth;\r\n    const ratioH = simDimensions.height / renderedHeight; \r\n\r\n    const canvas = new OffscreenCanvas(simDimensions.width, simDimensions.height); \r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {      \r\n      // Rescale the image for the simulation\r\n      ctx.scale(ratioW, ratioH);\r\n      ctx.drawImage(img, 0, 0, renderedWidth, renderedHeight);\r\n      const image = ctx.getImageData(0, 0, simDimensions.width, simDimensions.height);\r\n\r\n      setImage({\r\n        image: image,\r\n        renderedWidth: renderedWidth,\r\n        renderedHeight: renderedHeight,\r\n        offscreenWidth: simDimensions.width,\r\n        offscreenHeight: simDimensions.height,\r\n        ratioOffscreenWidth: ratioW,\r\n        ratioOffscreenHeight: ratioH,\r\n        limitOffscreen: 64\r\n      });  \r\n\r\n      setWorker(new MyWorker());\r\n      setStop(false);      \r\n    } \r\n    else {\r\n      console.error(\"ctx from url image for resizing could not be created\");\r\n    }   \r\n  }, []);\r\n\r\n  const handleLoadingImageError = useCallback(() => {\r\n    setStop(true);  \r\n  }, []);\r\n\r\n  const handleGeneratedImageDrawn = useCallback((img: ImageData) => {    \r\n    if (myWorkerInstance && imageFromUrl.image)\r\n    {\r\n      console.log(\"[handleGeneratedImageDrawn] sent msg: \" + simulation.best.id + \" - \" + simulation.best.fitness);\r\n      const message: AGworkerIn = {\r\n        isRunning: simulation.isRunning,\r\n        image: imageFromUrl.image, \r\n        configuration: configuration,\r\n        notImprovingSince: simulation.notImprovingSince,\r\n        best: simulation.best,\r\n        population: simulation.population,\r\n        generation: simulation.generation,\r\n        renderingHeight: imageFromUrl.offscreenHeight,\r\n        renderingWidth: imageFromUrl.offscreenWidth\r\n      };\r\n\r\n      myWorkerInstance.postMessage(message);\r\n    }\r\n  }, [simulation, imageFromUrl, myWorkerInstance, configuration]);\r\n\r\n  const handleValuesChange = useCallback((config: Configuration) => {   \r\n    setConfiguration(config);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (myWorkerInstance) {\r\n      myWorkerInstance.addEventListener('message', function(e) {      \r\n        const response: AGworkerOut = e.data as AGworkerOut;\r\n        setSimulation(response);      \r\n      });\r\n    }    \r\n  }, [myWorkerInstance]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">       \r\n      <InputImageUrl className=\"one\" start={handleStart} stop={handleStop} isStopped={isStopped}/>\r\n      { imageUrl &&\r\n        <RendererFromUrl className=\"two\" classNameOnError=\"twoExpanded\" name={\"original-image\"} onImageDrawn={handleUrlImageDrawn} onLoadingError={handleLoadingImageError} limit={limitImageSize} url={imageUrl}/>\r\n      }\r\n      { imageFromUrl.image && !isStopped &&\r\n        <RendererFromDrawing className=\"three\" onImageDrawn={handleGeneratedImageDrawn} name={\"generated-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} drawingSteps={simulation.best.phenotype}/>        \r\n      }\r\n      { simulation.best.diff && !isStopped &&\r\n        <RendererFromData className=\"four\" name={\"diff-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} data={simulation.best.diff}/>        \r\n      }\r\n      { !isStopped &&\r\n        <GAInformation \r\n          className=\"five\" \r\n          generation={simulation.generation} \r\n          fitness={simulation.best.fitness} \r\n          ssim={simulation.best.ssim}\r\n          pixelDiff={simulation.best.pixelDiff}\r\n          idBest={simulation.best.id} \r\n          elapsedTimeForGeneration={simulation.elapsedTime}\r\n          notImprovingSince={simulation.notImprovingSince}\r\n        />\r\n      }            \r\n      {\r\n        isStopped &&\r\n        <GAConfiguration\r\n          population={50}\r\n          selectCutoff={0.2}\r\n          keepPreviousRatio={0.1}\r\n          newIndividualRatio={0.1}\r\n          crossoverParentRatio={0.6}\r\n          mutationRate={0.1}\r\n          vertexMovement={5}\r\n          colorModificationRate={0.1}\r\n          enableSsim={true}\r\n          enablePixelDiff={true}\r\n          ratioSsim={3}\r\n          ratioPixelDiff={1}\r\n          enableTransparency={true}\r\n          nbVertex={3}\r\n          nbPolygons={125}\r\n          className=\"five\" \r\n          onValuesChange={handleValuesChange}\r\n        />\r\n      }      \r\n    </div>            \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}