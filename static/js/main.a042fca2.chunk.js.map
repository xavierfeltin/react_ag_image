{"version":3,"sources":["test.worker.ts","common/geometry.ts","InputImageUrl.tsx","RendererFromUrl.tsx","RendererFromDrawing.tsx","RendererFromData.tsx","GAInformation.tsx","InputRange.tsx","GAConfiguration.tsx","GAConfigurationInfo.tsx","MyApp.tsx","index.tsx"],"names":["Worker_fn","Worker","getRGBAFromColor","c","length","drawPolygon","ctx","polygon","vertices","fillStyle","color","beginPath","vertex","moveTo","x","y","i","lineTo","closePath","fill","getLimitDimensions","width","height","limit","ratioImage","Math","round","ratio","InputImageUrl","start","stop","links","isStopped","className","useState","url","setUrl","onSubmit","e","preventDefault","direction","spacing","align","type","name","value","onChange","target","disabled","id","onClick","linkElements","forEach","link","elem","variant","currentTarget","push","generateLinks","RendererFromUrl","onImageDrawn","onLoadingError","classNameOnError","canvasRef","useRef","isErrorOnLoad","setError","imageUrl","setImageUrl","useEffect","canvas","current","getContext","img","Image","crossOrigin","onload","console","error","drawImage","src","onerror","status","mr","ref","RendererFromDrawing","ratioW","ratioH","drawingSteps","clearRect","fillRect","scale","shape","draw","RendererFromData","data","putImageData","GAInformation","generation","fitness","ssim","pixelDiff","subPixel","idBest","elapsedTimeForGeneration","notImprovingSince","isNumeric","toFixed","InputRange","defaultVal","min","max","step","label","setValue","newValue","valueAsNumber","GAConfiguration","population","parentSelectionStrategy","selectCutoff","tournamentSize","keepPreviousRatio","newIndividualRatio","crossoverParentRatio","mutationRate","crossoverStrategy","vertexMovement","colorModificationRate","enableSsim","enablePixelDiff","enableSubDiff","ratioSsim","ratioPixelDiff","ratioSubDiff","enableTransparency","nbVertex","nbPolygons","resolution","onValuesChange","values","setValues","as","size","v","htmlFor","checked","isChecked","GAConfigurationInfo","elements","generateTournamentInforation","enabledEngines","join","generateFitnessEngineInformation","MyApp","configuration","setConfiguration","isRunning","best","genes","diff","undefined","probability","phenotype","elapsedTime","simulation","setSimulation","response","setResponse","image","renderedWidth","renderedHeight","ratioOffscreenWidth","ratioOffscreenHeight","offscreenWidth","offscreenHeight","limitOffscreen","imageFromUrl","setImage","myWorkerInstance","setWorker","setStop","handleResponse","useCallback","handleStart","newWorker","MyWorker","log","addEventListener","message","renderingHeight","renderingWidth","postMessage","handleStop","terminate","handleUrlImageDrawn","simDimensions","OffscreenCanvas","getImageData","handleLoadingImageError","handleValuesChange","config","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.a042fca2.chunk.js","sourcesContent":["export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/test.worker.5ee4e109.js\");\n}\n","import { Context } from \"vm\";\r\n\r\nexport interface Rect {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    color: number[];\r\n}\r\n\r\nexport interface Vertex {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface Polygon {\r\n    vertices: Vertex[];\r\n    color: number[];\r\n}\r\n\r\nexport interface Image {\r\n    image: ImageData|null;\r\n    renderedWidth: number;\r\n    renderedHeight: number;\r\n    offscreenWidth: number;\r\n    offscreenHeight: number;\r\n    ratioOffscreenWidth: number; // ratio to limit\r\n    ratioOffscreenHeight: number; // ratio to limit\r\n    limitOffscreen: number;\r\n}\r\n\r\nexport function getRGBAFromColor(c: number[]): string {\r\n    let color = \"rgb(0, 0, 0\";\r\n    if (c.length === 3) {\r\n        color = `rgb(${c[0]},${c[1]},${c[2]})`;\r\n    }\r\n    else {\r\n        color = `rgba(${c[0]},${c[1]},${c[2]},${c[3]})`\r\n    }\r\n    return color;\r\n}\r\n\r\nexport function drawRectangle(ctx: Context, rect: Rect) {\r\n    if (!ctx ) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle =  getRGBAFromColor(rect.color);;\r\n    ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\n\r\nexport function drawPolygon(ctx: Context, polygon: Polygon) {\r\n    if (!ctx || polygon.vertices.length === 0) {\r\n        return;\r\n    }\r\n\r\n    ctx.fillStyle = getRGBAFromColor(polygon.color);\r\n    ctx.beginPath();\r\n\r\n    let vertex = polygon.vertices[0];\r\n    ctx.moveTo(vertex.x, vertex.y);\r\n    for(let i = 1; i < polygon.vertices.length; i++) {\r\n        vertex = polygon.vertices[i];\r\n        ctx.lineTo(vertex.x, vertex.y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n\r\nexport function moveVertex(v: Vertex, range: number, width: number, height: number): Vertex {\r\n    const direction = Math.random() * 2 * Math.PI;\r\n    const distance = Math.random() * range;\r\n\r\n    let x = v.x + Math.floor(Math.cos(direction) * distance);\r\n    x = Math.max(0, Math.min(x, width));\r\n\r\n    let y = v.y + Math.floor(Math.sin(direction) * distance);\r\n    y = Math.max(0, Math.min(y, height));\r\n\r\n    const movedVertex: Vertex = {\r\n        x: x,\r\n        y: y\r\n    };\r\n\r\n    return movedVertex; \r\n  };\r\n\r\n  export function copyPolygon(p: Polygon): Polygon {\r\n      const vertices: Vertex[] = [];\r\n      p.vertices.forEach((vertex: Vertex) => {\r\n          let v = {...vertex};\r\n          vertices.push(v);\r\n      });\r\n\r\n      const polygon = {\r\n          vertices: vertices,\r\n          color: [...p.color]\r\n      };\r\n\r\n      return polygon;\r\n  }\r\n\r\n export function getLimitDimensions(width: number, height: number, limit?: number): {width: number, height: number, ratio: number} {\r\n    const ratioImage = height / width;\r\n    if (limit && (width >= limit || height >= limit)) {        \r\n        if (ratioImage > 1) {\r\n            return { width: Math.round(limit / ratioImage), height: limit, ratio: ratioImage };\r\n        }\r\n        else {\r\n            return { width: limit, height: Math.round(limit * ratioImage), ratio: ratioImage};\r\n        }\r\n        \r\n    }\r\n    return { width: width, height: height, ratio: ratioImage};\r\n}","import './InputImageUrl.css';\r\nimport React, {useState} from 'react';\r\nimport { Input, Button, Stack } from \"@chakra-ui/react\"\r\n\r\nexport interface InputImageProps {\r\n    start: (url: string) => void;\r\n    stop: () => void;\r\n    links: {name: string, link: string}[] ;\r\n    isStopped: boolean;\r\n    className: string;\r\n};\r\n\r\nexport function InputImageUrl({start, stop, links, isStopped, className}: InputImageProps) {\r\n    const [url, setUrl] = useState<string>('https://my-image-url');\r\n  \r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      start && start(url);\r\n    }\r\n\r\n    const onStop = () => {\r\n        stop && stop();\r\n    }\r\n\r\n    const generateLinks = (): JSX.Element[] =>  {\r\n        const linkElements: JSX.Element[] = [];\r\n        links.forEach((link => {\r\n            const elem: JSX.Element = <Button key={link.name} variant=\"link\" value={link.link} onClick={e => {setUrl(e.currentTarget.value);}} > {link.name} </Button>; \r\n            linkElements.push(elem);\r\n        }))\r\n        return linkElements;\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div>\r\n                <form onSubmit={onSubmit}>\r\n                    <Stack direction=\"row\" spacing={4} align=\"center\">\r\n                        <Input type=\"text\" name=\"image-url\" value={url} onChange={e => setUrl(e.target.value)} />\r\n                        <Button disabled={!isStopped} type=\"submit\" id=\"start-button\">Start</Button>        \r\n                        <Button disabled={isStopped} type=\"button\" id=\"stop-button\" onClick={onStop}>Stop</Button>      \r\n                    </Stack>  \r\n                </form>                \r\n            </div>\r\n            <div>\r\n                <Stack direction=\"row\" spacing={4} align=\"center\">\r\n                    {generateLinks()}\r\n                </Stack>\r\n            </div>            \r\n        </div>\r\n    )\r\n} ","import './RendererFromUrl.css';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { getLimitDimensions } from './common/geometry';\r\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from '@chakra-ui/alert';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    url: string;\r\n    limit?: number;\r\n    onImageDrawn: (img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => void;\r\n    onLoadingError: () => void;\r\n    className: string;\r\n    classNameOnError: string;\r\n};\r\n\r\nexport function RendererFromUrl({ name, url, limit, onImageDrawn, onLoadingError, className, classNameOnError }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const [isErrorOnLoad, setError] = useState<boolean>(false);\r\n    const [imageUrl, setImageUrl] = useState<string>(\"\"); \r\n\r\n    useEffect(() => {       \r\n        if (url !== imageUrl)\r\n        {\r\n            setImageUrl(url);\r\n            setError(false);\r\n            const canvas = canvasRef.current as HTMLCanvasElement;\r\n            if (canvas) {\r\n                const ctx = canvas.getContext('2d');\r\n            \r\n                const img = new Image();\r\n                img.crossOrigin = \"Anonymous\";  // This enables CORS\r\n                img.onload = () => {\r\n                    const { width, height } = getLimitDimensions(img.width, img.height, limit);            \r\n                    if (width === 0 || height === 0) {\r\n                        console.error(\"Fail to load the image\");\r\n                    }\r\n        \r\n                    canvas.width = width;\r\n                    canvas.height = height;\r\n        \r\n                    if (ctx) {\r\n                        ctx.drawImage(img, 0, 0, width, height);\r\n                        onImageDrawn?.(img, width, height);\r\n                    }\r\n                    else {\r\n                        console.error(\"ctx is null the image can not be loaded\");\r\n                    }                        \r\n                };\r\n                img.src = url;\r\n                img.onerror = () => {\r\n                    setError(true);\r\n                    onLoadingError();\r\n                }    \r\n            }\r\n        }         \r\n    }, [url, limit, onImageDrawn, onLoadingError, imageUrl]);\r\n\r\n    return (\r\n        <div className={isErrorOnLoad ? classNameOnError : className}>\r\n            {isErrorOnLoad &&\r\n                <Alert status=\"error\">\r\n                    <AlertIcon />\r\n                    <AlertTitle mr={2}>Loading error!</AlertTitle>\r\n                    <AlertDescription>The image {url} could not be loaded. Try with another URL.</AlertDescription>\r\n                </Alert>\r\n            }\r\n            <canvas id={name} ref={canvasRef} />\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\nimport {drawPolygon, Polygon} from \"./common/geometry\";\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    drawingSteps: Polygon[];\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, drawingSteps: Polygon[] = []): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    ctx.scale(ratioW, ratioH);\r\n    drawingSteps.forEach(shape => {\r\n        drawPolygon(ctx, shape);\r\n    })\r\n}\r\n\r\nexport function RendererFromDrawing({ name, width, height, ratioW, ratioH, drawingSteps, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, drawingSteps);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, drawingSteps]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","import { useEffect, useRef } from 'react';\r\nimport { Context } from 'vm';\r\n\r\nexport interface RendererProps {\r\n    name: string;  \r\n    width: number;\r\n    height: number;\r\n    ratioW: number;\r\n    ratioH: number;\r\n    data: ImageData;\r\n    className: string;\r\n};\r\n\r\nfunction draw(ctx: Context, width: number, height: number, ratioW: number, ratioH: number, data: ImageData, canvas: HTMLCanvasElement): void {    \r\n    ctx.clearRect(0, 0, width, height);\r\n    ctx.putImageData(data, 0, 0);\r\n    ctx.scale(ratioW, ratioH);        \r\n    ctx.drawImage(canvas, 0, 0);    \r\n}\r\n\r\nexport function RendererFromData({ name, width, height, ratioW, ratioH, data, className }: RendererProps) {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current as HTMLCanvasElement;\r\n        const ctx = canvas.getContext('2d');\r\n                \r\n        if (width === 0 || height === 0) {\r\n            console.error(\"Fail to create the drawing\");\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (ctx) {            \r\n            draw(ctx, width, height, ratioW, ratioH, data, canvas);\r\n        }\r\n        else {\r\n            console.error(\"ctx is null the drawing can not be done\");\r\n        }       \r\n    }, [width, height, ratioW, ratioH, data]);\r\n\r\n    return (\r\n        <div>\r\n          <canvas className={className} id={name} ref={canvasRef} />\r\n        </div>\r\n    );    \r\n}\r\n","import { Table, Tbody, Td, Th, Thead, Tr } from \"@chakra-ui/table\";\r\n\r\nexport interface GAInfoProps {\r\n    generation: number;  \r\n    fitness: number;\r\n    ssim: number;\r\n    pixelDiff: number;\r\n    subPixel: number;\r\n    idBest: number;\r\n    elapsedTimeForGeneration: number;\r\n    notImprovingSince: number;\r\n    className: string;\r\n};\r\n\r\nexport function GAInformation({ generation, fitness, ssim, pixelDiff, subPixel, idBest, elapsedTimeForGeneration, notImprovingSince, className }: GAInfoProps) {\r\n    return (\r\n        <div className={className}>\r\n          <Table variant=\"striped\">\r\n            <Thead>\r\n              <Tr><Th> Simulation </Th></Tr>\r\n            </Thead>\r\n            <Tbody>\r\n            <Tr><Td>Generation:</Td><Td isNumeric>{generation}</Td></Tr>\r\n            <Tr><Td>Not improving since:</Td><Td isNumeric>{notImprovingSince}</Td></Tr>\r\n            <Tr><Td>Time by generation:</Td><Td isNumeric>{elapsedTimeForGeneration} seconds</Td></Tr>\r\n            <Tr><Td>Global fitness:</Td><Td isNumeric>{(fitness * 100.0).toFixed(2)}%</Td></Tr>\r\n            <Tr><Td>Ssim fitness:</Td><Td isNumeric>{(ssim * 100.0).toFixed(2)}%</Td></Tr>\r\n            <Tr><Td>Pixel Diff fitness:</Td><Td isNumeric>{(pixelDiff * 100.0).toFixed(2)}%</Td></Tr>\r\n            <Tr><Td>Sub Pixel fitness:</Td><Td isNumeric>{(subPixel * 100.0).toFixed(2)}%</Td></Tr>\r\n            <Tr><Td>Best indivudial:</Td><Td isNumeric>{idBest}</Td></Tr>\r\n            </Tbody>\r\n          </Table>\r\n        </div>\r\n    );    \r\n}","import './InputRange.css';\r\nimport { useState } from \"react\";\r\n\r\ninterface InputRangeProps {\r\n    defaultVal: number;\r\n    min: number;\r\n    max: number;\r\n    step: number;\r\n    label: string;\r\n    id: string;\r\n    name: string;\r\n    onChange: (val: number) => void\r\n}\r\n\r\nexport function InputRange({defaultVal, min, max, step, label, id, name, onChange}: InputRangeProps) {\r\n    const [value, setValue] = useState<number>(defaultVal);\r\n\r\n    const handleOnChange = function(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const newValue = e.target.valueAsNumber; \r\n        setValue(newValue);\r\n        onChange(newValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"inputrange-wrapper\">\r\n            <label className=\"inputrange-one\">{label}</label>\r\n            <input className=\"inputrange-two\" type=\"range\" id={id} name={name} min={min} max={max} step={step} value={value} onChange={handleOnChange}/>\r\n            <span className=\"inputrange-three\">{value}</span>\r\n        </div>        \r\n    )\r\n}","import './GAConfiguration.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Configuration } from \"./common/ga\";\r\nimport { InputRange } from \"./InputRange\"\r\nimport { Switch, Heading, VStack } from \"@chakra-ui/react\"\r\n\r\nexport interface InputRangeProps {\r\n    population: number;\r\n    parentSelectionStrategy: string;\r\n    selectCutoff: number;\r\n    tournamentSize: number;\r\n    keepPreviousRatio: number;\r\n    newIndividualRatio: number;\r\n    crossoverParentRatio: number;\r\n    mutationRate: number;\r\n    crossoverStrategy: string;\r\n    vertexMovement: number;\r\n    colorModificationRate: number;\r\n    enableSsim: boolean;\r\n    enablePixelDiff: boolean;\r\n    enableSubDiff: boolean;\r\n    ratioSsim: number;\r\n    ratioPixelDiff: number;\r\n    ratioSubDiff: number;\r\n    enableTransparency: boolean;\r\n    nbVertex: number;\r\n    nbPolygons: number;\r\n    resolution: number;\r\n    onValuesChange: (configuration: Configuration) => void;\r\n    className: string;\r\n}\r\n\r\nexport function GAConfiguration({\r\n    population,\r\n    parentSelectionStrategy,\r\n    selectCutoff,\r\n    tournamentSize,\r\n    keepPreviousRatio,\r\n    newIndividualRatio,\r\n    crossoverParentRatio,\r\n    mutationRate,\r\n    crossoverStrategy,\r\n    vertexMovement,\r\n    colorModificationRate,\r\n    enableSsim,\r\n    enablePixelDiff,\r\n    enableSubDiff,\r\n    ratioSsim,\r\n    ratioPixelDiff,\r\n    ratioSubDiff,\r\n    enableTransparency,\r\n    nbVertex,\r\n    nbPolygons,\r\n    resolution,\r\n    onValuesChange, className} : InputRangeProps) {\r\n    \r\n        const [values, setValues] = useState<Configuration>({\r\n            population: population,\r\n            parentSelectionStrategy: parentSelectionStrategy,\r\n            selectCutoff: selectCutoff,\r\n            tournamentSize: tournamentSize,\r\n            keepPreviousRatio: keepPreviousRatio,\r\n            newIndividualRatio: newIndividualRatio,\r\n            crossoverParentRatio: crossoverParentRatio,\r\n            mutationRate: mutationRate,\r\n            crossoverStrategy: crossoverStrategy,\r\n            vertexMovement: vertexMovement,\r\n            colorModificationRate: colorModificationRate,\r\n            enableSsim: enableSsim,\r\n            enablePixelDiff: enablePixelDiff,\r\n            enableSubDiff: enableSubDiff,\r\n            ratioSsim: ratioSsim,\r\n            ratioPixelDiff: ratioPixelDiff,\r\n            ratioSubDiff: ratioSubDiff,\r\n            enableTransparency: enableTransparency,\r\n            nbVertex: nbVertex,\r\n            nbPolygons: nbPolygons,\r\n            resolution: resolution\r\n        });\r\n\r\n    useEffect(() => {\r\n        onValuesChange(values);\r\n    }, [values, onValuesChange]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <VStack spacing={6}>\r\n            <div>\r\n                <Heading as=\"h4\" size=\"sm\">General</Heading>\r\n                <InputRange id=\"ga-population\" name=\"ga-population\" label=\"Population\" min={10} max={300} defaultVal={values.population} step={1} onChange={v => setValues({...values, population: v})}/>\r\n                <InputRange id=\"ga-keep-previous\" name=\"ga-keep-previous\" label=\"Keep previous individual\" min={0} max={1} defaultVal={values.keepPreviousRatio} step={0.01}onChange={v => setValues({...values, keepPreviousRatio: v})}/>\r\n                <InputRange id=\"ga-new-individual\" name=\"ga-new-individual\" label=\"Generate new individual\" min={0} max={1} defaultVal={values.newIndividualRatio} step={0.01} onChange={v => setValues({...values, newIndividualRatio: v})}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Heading as=\"h4\" size=\"sm\">Crossover</Heading>\r\n                <div className=\"gaconfiguration-wrapper\">\r\n                    <label className=\"gaconfiguration-one\">Type: </label> <br/>\r\n                    <div className=\"gaconfiguration-two\">\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-tournament\">Tournament <br/>\r\n                            <input type=\"radio\" id=\"strategy-tournament\" name=\"parentstrategy\" value=\"tournament\" checked={values.parentSelectionStrategy === \"tournament\"} onChange={v =>{setValues({...values, parentSelectionStrategy: v.target.value})}}/>\r\n                        </label> \r\n\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-fortunewheel\">Fortune Wheel <br/>\r\n                            <input type=\"radio\" id=\"strategy-fortunewheel\" name=\"parentstrategy\" value=\"fortunewheel\" checked={values.parentSelectionStrategy === \"fortunewheel\"} onChange={v =>{setValues({...values, parentSelectionStrategy: v.target.value})}}/>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            \r\n                {values.parentSelectionStrategy === \"tournament\" &&\r\n                    <InputRange id=\"ga-selection-cutoff\" name=\"ga-selection-cutoff\" label=\"Selection cutoff\" min={0} max={1} defaultVal={values.selectCutoff} step={0.05} onChange={v => setValues({...values, selectCutoff: v})}/>                \r\n                }\r\n\r\n                {values.parentSelectionStrategy === \"tournament\" &&\r\n                    <InputRange id=\"ga-tournament-size\" name=\"ga-tournament-size\" label=\"Tournament size\" min={1} max={Math.round(values.selectCutoff * values.population)} defaultVal={values.tournamentSize} step={1} onChange={v => setValues({...values, tournamentSize: v})}/>\r\n                }\r\n\r\n                <InputRange id=\"ga-crossover-parent\" name=\"ga-crossover-parent\" label=\"Main parent ratio\" min={0} max={1} defaultVal={values.crossoverParentRatio} step={0.05} onChange={v => setValues({...values, crossoverParentRatio: v})}/>\r\n                <div className=\"gaconfiguration-wrapper\">\r\n                    <label className=\"gaconfiguration-one\">Granularity: </label> <br/>\r\n                    <div className=\"gaconfiguration-two\">\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-polygon\">Polygons <br/>\r\n                            <input type=\"radio\" id=\"strategy-polygon\" name=\"strategy\" value=\"polygon\" checked={values.crossoverStrategy === \"polygon\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                        </label> \r\n\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-vertex\">Vertex <br/>\r\n                            <input type=\"radio\" id=\"strategy-vertex\" name=\"strategy\" value=\"vertex\" checked={values.crossoverStrategy === \"vertex\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                        </label>\r\n\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-data\">Data <br/>\r\n                            <input type=\"radio\" id=\"strategy-data\" name=\"strategy\" value=\"data\" checked={values.crossoverStrategy === \"data\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                        </label>\r\n\r\n                        <label className=\"ga-strategy-label\" htmlFor=\"strategy-singlePoint\">Single point <br/>\r\n                            <input type=\"radio\" id=\"strategy-singlePoint\" name=\"strategy\" value=\"singlePoint\" checked={values.crossoverStrategy === \"singlePoint\"} onChange={v =>{setValues({...values, crossoverStrategy: v.target.value})}}/>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div>\r\n                <Heading as=\"h4\" size=\"sm\">Mutation</Heading>\r\n                <InputRange id=\"ga-mutation\" name=\"ga-mutation\" label=\"Mutation rate\" min={0} max={1} defaultVal={values.mutationRate} step={0.01} onChange={v => setValues({...values, mutationRate: v})}/>\r\n                <InputRange id=\"ga-vertex-movement\" name=\"ga-vertex-movement\" label=\"Vertex movement\" min={0} max={0.5} defaultVal={values.vertexMovement} step={0.01} onChange={v => setValues({...values, vertexMovement: v})}/>\r\n                <InputRange id=\"ga-color-modification\" name=\"ga-color-modification\" label=\"Color modification\" min={0} max={1} defaultVal={values.colorModificationRate} step={0.01} onChange={v => setValues({...values, colorModificationRate: v})}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Heading as=\"h4\" size=\"sm\">Image rendering</Heading>\r\n                <InputRange id=\"ga-resolution\" name=\"ga-resolution\" label=\"resolution\" min={32} max={256} defaultVal={values.resolution} step={32} onChange={v => setValues({...values, resolution: v})}/>\r\n                <div>\r\n                    <label htmlFor=\"ga-ssim\">SSIM:</label>\r\n                    <Switch className=\"ga-chakra-switch\" id=\"ga-ssim\" value=\"ssim\" isChecked={values.enableSsim} onChange={v =>{setValues({...values, enableSsim: v.target.checked})}}/>\r\n                </div>\r\n                <div>            \r\n                    <label htmlFor=\"ga-pixeldiff\">Pixel differenciation:</label>\r\n                    <Switch className=\"ga-chakra-switch\" id=\"ga-pixeldiff\" value=\"pixeldiff\" isChecked={values.enablePixelDiff} onChange={v => setValues({...values, enablePixelDiff: v.target.checked})}/>\r\n                </div>\r\n                <div>            \r\n                    <label htmlFor=\"ga-subdiff\">Pixel substraction:</label>\r\n                    <Switch className=\"ga-chakra-switch\" id=\"ga-subdiff\" value=\"subdiff\" isChecked={values.enableSubDiff} onChange={v => setValues({...values, enableSubDiff: v.target.checked})}/>\r\n                </div>\r\n                {values.enableSsim &&\r\n                    <InputRange id=\"ga-ssim-ratio\" name=\"ga-ssim-ratio\" label=\"Ratio Ssim\" min={0} max={10} defaultVal={values.ratioSsim} step={1} onChange={v => setValues({...values, ratioSsim: v})}/>\r\n                }\r\n                {values.enablePixelDiff && \r\n                    <InputRange id=\"ga-pixldiff-ratio\" name=\"ga-pixldiff-ration\" label=\"Ratio Pixel diff\" min={0} max={10} defaultVal={values.ratioPixelDiff} step={1} onChange={v => setValues({...values, ratioPixelDiff: v})}/>\r\n                }\r\n                {values.enableSubDiff &&\r\n                    <InputRange id=\"ga-subdiff-ratio\" name=\"ga-subdiff-ration\" label=\"Ratio Sub diff\" min={0} max={10} defaultVal={values.ratioSubDiff} step={1} onChange={v => setValues({...values, ratioSubDiff: v})}/>            \r\n                }\r\n            \r\n                <div>   \r\n                    <label htmlFor=\"ga-transparency\">Transparency:</label>\r\n                    <Switch className=\"ga-chakra-switch\" id=\"ga-transparency\" value=\"transparency\" isChecked={values.enableTransparency} onChange={v => setValues({...values, enableTransparency: v.target.checked})}/>\r\n                </div>\r\n\r\n                <InputRange id=\"ga-vertex\" name=\"ga-vertex\" label=\"Vertex\" min={3} max={10} defaultVal={values.nbVertex} step={1} onChange={v => setValues({...values, nbVertex: v})}/>\r\n                <InputRange id=\"ga-vertices\" name=\"ga-vertices\" label=\"Vertices\" min={50} max={500} defaultVal={values.nbPolygons} step={1} onChange={v => setValues({...values, nbPolygons: v})}/>\r\n            </div>\r\n            </VStack>\r\n        </div>\r\n    )\r\n}","import { VStack } from \"@chakra-ui/layout\";\r\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@chakra-ui/table\";\r\n\r\nexport interface InputRangeProps {\r\n    population: number;\r\n    parentSelectionStrategy: string;\r\n    selectCutoff: number;\r\n    tournamentSize: number;\r\n    keepPreviousRatio: number;\r\n    newIndividualRatio: number;\r\n    crossoverParentRatio: number;\r\n    mutationRate: number;\r\n    crossoverStrategy: string;\r\n    vertexMovement: number;\r\n    colorModificationRate: number;\r\n    enableSsim: boolean;\r\n    enablePixelDiff: boolean;\r\n    enableSubDiff: boolean;\r\n    ratioSsim: number;\r\n    ratioPixelDiff: number;\r\n    ratioSubDiff: number;\r\n    enableTransparency: boolean;\r\n    nbVertex: number;\r\n    nbPolygons: number;\r\n    resolution: number;\r\n    className: string;\r\n}\r\n\r\nexport function GAConfigurationInfo({\r\n    population,\r\n    parentSelectionStrategy,\r\n    selectCutoff,\r\n    tournamentSize,\r\n    keepPreviousRatio,\r\n    newIndividualRatio,\r\n    crossoverParentRatio,\r\n    mutationRate,\r\n    crossoverStrategy,\r\n    vertexMovement,\r\n    colorModificationRate,\r\n    enableSsim,\r\n    enablePixelDiff,\r\n    enableSubDiff,\r\n    ratioSsim,\r\n    ratioPixelDiff,\r\n    ratioSubDiff,\r\n    enableTransparency,\r\n    nbVertex,\r\n    nbPolygons,\r\n    resolution,\r\n    className}: InputRangeProps) {\r\n\r\n    const generateTournamentInforation = (): JSX.Element[] => {\r\n        const elements: JSX.Element[] = []; \r\n        elements.push(<Tr key=\"tr-1\"><Td> Selection cutoff:</Td><Td isNumeric>{selectCutoff}</Td></Tr>);\r\n        elements.push(<Tr key=\"tr-2\"><Td> Tournament size::</Td><Td isNumeric>{tournamentSize}</Td></Tr>);\r\n        return elements;               \r\n    }\r\n\r\n    const generateFitnessEngineInformation = (): JSX.Element[] => {\r\n        const enabledEngines: string[] = [];\r\n\r\n        if (enableSsim) {\r\n            enabledEngines.push(\"Ssim (\" + ratioSsim + \")\");\r\n        }\r\n\r\n        if (enablePixelDiff) {\r\n            enabledEngines.push(\"Pixel diff (\" + ratioPixelDiff + \")\");\r\n        }\r\n\r\n        if (enableSubDiff) {\r\n            enabledEngines.push(\"Sub diff (\" + ratioSubDiff + \")\");\r\n        }\r\n        \r\n        const elements: JSX.Element[] = [];\r\n        elements.push(<Tr key=\"tr-3\"><Td> Fitness functions:</Td><Td isNumeric>{enabledEngines.join(',')}</Td></Tr>);\r\n        return elements;\r\n    }\r\n\r\n    return (\r\n        <div className={className}>\r\n            <VStack spacing={6}>\r\n            <Table variant=\"striped\">\r\n                <Thead>\r\n                    <Tr><Th>General</Th></Tr>\r\n                </Thead>\r\n                <Tbody>                \r\n                <Tr><Td>Population size: </Td><Td isNumeric>{population}</Td></Tr>\r\n                <Tr><Td>Keep from previous generation: </Td><Td isNumeric>{keepPreviousRatio * 100}% </Td></Tr>\r\n                <Tr><Td>Insert new individual in generation: </Td><Td isNumeric>{newIndividualRatio * 100}% </Td></Tr>\r\n                </Tbody>\r\n            </Table>\r\n\r\n            <Table variant=\"striped\">\r\n                <Thead>\r\n                    <Tr><Th>Crossover</Th></Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                <Tr><Td>Parent selection strategy:</Td><Td isNumeric>{parentSelectionStrategy}</Td></Tr>\r\n                {generateTournamentInforation()}\r\n                <Tr><Td>Main parent ratio during crossover :</Td><Td isNumeric>{crossoverParentRatio * 100}%</Td></Tr>\r\n                <Tr><Td>Crossover strategy :</Td><Td isNumeric>{crossoverStrategy}</Td></Tr>\r\n                </Tbody>\r\n            </Table>\r\n\r\n            <Table variant=\"striped\">\r\n                <Thead>\r\n                   <Tr><Th>Mutation</Th></Tr> \r\n                </Thead>\r\n                <Tbody>    \r\n                <Tr><Td>Mutation rate :</Td><Td isNumeric>{mutationRate * 100}%</Td></Tr>\r\n                <Tr><Td>Vertex movement during mutation :</Td><Td isNumeric>{vertexMovement * 100}%</Td></Tr>\r\n                <Tr><Td>Color movement during mutation :</Td><Td isNumeric>{colorModificationRate * 100}%</Td></Tr>\r\n                </Tbody>\r\n            </Table>\r\n\r\n            <Table variant=\"striped\">\r\n                <Thead>\r\n                    <Tr><Th>Image rendering</Th></Tr>\r\n                </Thead>\r\n                <Tbody>               \r\n                <Tr><Td>Resolution :</Td><Td isNumeric>{resolution}px</Td></Tr>                  \r\n                {generateFitnessEngineInformation()}\r\n                <Tr><Td>Transparency enabled :</Td><Td isNumeric>{enableTransparency}</Td></Tr>\r\n                <Tr><Td>Vertex by polygon :</Td><Td isNumeric>{nbVertex}</Td></Tr>\r\n                <Tr><Td>Generated polygons :</Td><Td isNumeric>{nbPolygons}</Td></Tr>         \r\n                </Tbody>   \r\n            </Table>\r\n            </VStack>\r\n        </div>\r\n    )\r\n}","import './MyApp.css';\r\nimport {useState, useCallback, useEffect} from \"react\";\r\n\r\nimport MyWorker from './test.worker';\r\nimport {AGworkerIn, AGworkerOut} from \"./common/communication\";\r\nimport { getLimitDimensions, Image } from './common/geometry';\r\nimport { InputImageUrl } from './InputImageUrl';\r\nimport { RendererFromUrl } from './RendererFromUrl';\r\nimport { RendererFromDrawing } from './RendererFromDrawing';\r\nimport { RendererFromData } from './RendererFromData';\r\nimport { GAInformation } from './GAInformation';\r\nimport { GAConfiguration } from './GAConfiguration';\r\nimport { Configuration } from './common/ga';\r\nimport { GAConfigurationInfo } from './GAConfigurationInfo';\r\n\r\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\"\r\n\r\nfunction MyApp() {\r\n\r\n  const limitImageSize = 256;\r\n  const sampleLnks: {name: string, link: string}[] = [\r\n    { \r\n      name: \"Einstein\",\r\n      link: \"https://raw.githubusercontent.com/obartra/ssim/master/spec/samples/einstein/Q1.gif\"\r\n    },\r\n    { \r\n      name: \"Joconde\",\r\n      link: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/390px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg\"\r\n    },\r\n    { \r\n      name: \"Photographer\",\r\n      link: \"https://i.picsum.photos/id/823/420/560.jpg?hmac=H6lJE4fRi96MxgWYyd3_79WbmObu-jJj7Zo40p5I-nU\"\r\n    },\r\n    { \r\n      name: \"Landscape\",\r\n      link: \"https://i.picsum.photos/id/1015/420/560.jpg?hmac=JcSYiOeUMQYq_XstyekCWyhAlg_e8UiPWxp66v-ki6Q\"\r\n    },\r\n    { \r\n      name: \"Random\",\r\n      link: \"https://picsum.photos/420/560\"\r\n    }       \r\n  ];\r\n\r\n  const [configuration, setConfiguration] = useState<Configuration>({\r\n    population: 50,\r\n    parentSelectionStrategy: \"tournament\",\r\n    selectCutoff: 0.2,\r\n    tournamentSize: 3,\r\n    keepPreviousRatio: 0.01,\r\n    newIndividualRatio: 0.01,\r\n    crossoverParentRatio: 0.6,\r\n    mutationRate: 0.01,\r\n    crossoverStrategy: \"polygon\",\r\n    vertexMovement: 0.15,\r\n    colorModificationRate: 0.1,\r\n    enableSsim: true,\r\n    enablePixelDiff: false,\r\n    enableSubDiff: false,\r\n    ratioSsim: 1,\r\n    ratioPixelDiff: 1,\r\n    ratioSubDiff: 1,\r\n    enableTransparency: true,\r\n    nbVertex: 3,\r\n    nbPolygons: 125,\r\n    resolution: 64\r\n  });\r\n\r\n  const [simulation, setSimulation] = useState<AGworkerOut>({\r\n    isRunning: false,\r\n    best: {\r\n      genes: [],\r\n      fitness: 0,\r\n      ssim: 0,\r\n      pixelDiff: 0,\r\n      subPixel: 0,\r\n      diff: undefined,\r\n      id: 0,\r\n      probability: 0,\r\n      phenotype: []\r\n    },\r\n    population: [],\r\n    generation: 0,\r\n    elapsedTime: 0,\r\n    notImprovingSince: 0\r\n  });\r\n\r\n  const [response, setResponse] = useState<AGworkerOut | undefined>(undefined);\r\n\r\n  const [imageUrl, setUrl] = useState<string>(\"\");\r\n  const [imageFromUrl, setImage] = useState<Image>({\r\n    image: null, renderedWidth: 0, renderedHeight: 0, ratioOffscreenWidth: 0, ratioOffscreenHeight: 0, offscreenWidth: 0, offscreenHeight: 0, limitOffscreen: 0});\r\n\r\n  const [myWorkerInstance, setWorker] = useState<Worker | null>(null); \r\n  const [isStopped, setStop] = useState<boolean>(true);\r\n\r\n  const handleResponse = useCallback((e: MessageEvent<any>) => {      \r\n    const response: AGworkerOut = e.data as AGworkerOut;\r\n    setResponse(response);             \r\n  }, []);\r\n\r\n  const handleStart = useCallback((url :string) => {    \r\n    const newWorker = new MyWorker();    \r\n    setWorker(newWorker);\r\n\r\n    setStop(false);      \r\n    setUrl(url);    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (myWorkerInstance) {\r\n      console.log(\"Add listener to worker\");\r\n      myWorkerInstance.addEventListener('message', handleResponse);\r\n    }    \r\n  }, [myWorkerInstance, handleResponse]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!myWorkerInstance || !imageFromUrl.image || !response || isStopped) {\r\n      return;\r\n    }\r\n\r\n    //if ((simulation.generation + 1) === response.generation) {\r\n      setSimulation(response);\r\n      //console.log(`Set response of generation ${response.generation}`);\r\n\r\n      //Send next message\r\n      const message: AGworkerIn = {\r\n        isRunning: response.isRunning,\r\n        image: imageFromUrl.image, \r\n        configuration: configuration,\r\n        notImprovingSince: response.notImprovingSince,\r\n        best: response.best,\r\n        population: response.population,\r\n        generation: response.generation,\r\n        renderingHeight: imageFromUrl.offscreenHeight,\r\n        renderingWidth: imageFromUrl.offscreenWidth\r\n      };\r\n\r\n      myWorkerInstance.postMessage(message);\r\n    /*\r\n    }\r\n    else {\r\n      console.warn(`Try to set response of generation ${response.generation} to simulation of generation ${simulation.generation}`);\r\n    } \r\n    */       \r\n  }, [myWorkerInstance, response, imageFromUrl, configuration, isStopped])\r\n\r\n  const handleStop = useCallback(() => {\r\n    // Reset simulation\r\n    if (myWorkerInstance) {\r\n      myWorkerInstance.terminate();\r\n      setSimulation({\r\n        isRunning: false,\r\n        best: {\r\n          genes: [],\r\n          fitness: 0,\r\n          ssim: 0,\r\n          pixelDiff: 0,\r\n          subPixel: 0,\r\n          diff: undefined,\r\n          id: 0,\r\n          probability: 0,\r\n          phenotype: []\r\n        },\r\n        population: [],\r\n        generation: 0,\r\n        elapsedTime: 0,\r\n        notImprovingSince: 0\r\n      });\r\n      setUrl(\"\");  \r\n      setStop(true); \r\n      setResponse(undefined);        \r\n    }    \r\n  }, [myWorkerInstance]);\r\n\r\n  const handleUrlImageDrawn = useCallback((img: CanvasImageSource, renderedWidth: number, renderedHeight: number) => {\r\n    const imageWidth: number = img.width as number;\r\n    const imageHeight: number = img.height as number;\r\n\r\n    const simDimensions = getLimitDimensions(imageWidth, imageHeight, configuration.resolution);  \r\n    const ratioW = simDimensions.width / renderedWidth;\r\n    const ratioH = simDimensions.height / renderedHeight; \r\n\r\n    const canvas = new OffscreenCanvas(simDimensions.width, simDimensions.height); \r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) {      \r\n      // Rescale the image for the simulation\r\n      ctx.scale(ratioW, ratioH);\r\n      ctx.drawImage(img, 0, 0, renderedWidth, renderedHeight);\r\n      const image = ctx.getImageData(0, 0, simDimensions.width, simDimensions.height);\r\n\r\n      setImage({\r\n        image: image,\r\n        renderedWidth: renderedWidth,\r\n        renderedHeight: renderedHeight,\r\n        offscreenWidth: simDimensions.width,\r\n        offscreenHeight: simDimensions.height,\r\n        ratioOffscreenWidth: ratioW,\r\n        ratioOffscreenHeight: ratioH,\r\n        limitOffscreen: configuration.resolution\r\n      });  \r\n\r\n      if (myWorkerInstance && image) {\r\n        //Send next message\r\n        const message: AGworkerIn = {\r\n          isRunning: simulation.isRunning,\r\n          image: image, \r\n          configuration: configuration,\r\n          notImprovingSince: simulation.notImprovingSince,\r\n          best: simulation.best,\r\n          population: simulation.population,\r\n          generation: simulation.generation,\r\n          renderingHeight: simDimensions.height,\r\n          renderingWidth: simDimensions.width\r\n        };\r\n\r\n        console.log(\"post message for first generation\");\r\n        myWorkerInstance.postMessage(message);\r\n      }     \r\n\r\n    } \r\n    else {\r\n      console.error(\"ctx from url image for resizing could not be created\");\r\n    }   \r\n  }, [simulation, myWorkerInstance, configuration]);\r\n\r\n  const handleLoadingImageError = useCallback(() => {\r\n    setStop(true);  \r\n  }, []);\r\n\r\n  const handleValuesChange = useCallback((config: Configuration) => {   \r\n    setConfiguration(config);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"wrapper\">       \r\n      <InputImageUrl className=\"one\" links={sampleLnks} start={handleStart} stop={handleStop} isStopped={isStopped}/>\r\n      { imageUrl &&\r\n        <RendererFromUrl className=\"two\" classNameOnError=\"twoExpanded\" name={\"original-image\"} onImageDrawn={handleUrlImageDrawn} onLoadingError={handleLoadingImageError} limit={limitImageSize} url={imageUrl}/>\r\n      }\r\n      { imageFromUrl.image && !isStopped &&\r\n        <RendererFromDrawing className=\"three\" name={\"generated-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} drawingSteps={simulation.best.phenotype}/>        \r\n      }\r\n      { simulation.best.diff && !isStopped &&\r\n        <RendererFromData className=\"four\" name={\"diff-image\"} width={imageFromUrl.renderedWidth} height={imageFromUrl.renderedHeight} ratioW={1 / imageFromUrl.ratioOffscreenWidth} ratioH={1 / imageFromUrl.ratioOffscreenHeight} data={simulation.best.diff}/>        \r\n      }\r\n      \r\n      {!isStopped &&\r\n          <div className=\"five\">\r\n          <Tabs>\r\n          <TabList>\r\n            <Tab>Painting Art</Tab>\r\n            <Tab>Genetic Algorithm parameters</Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <GAInformation \r\n                className=\"\" \r\n                generation={simulation.generation} \r\n                fitness={simulation.best.fitness} \r\n                ssim={simulation.best.ssim}\r\n                pixelDiff={simulation.best.pixelDiff}\r\n                subPixel={simulation.best.subPixel}\r\n                idBest={simulation.best.id} \r\n                elapsedTimeForGeneration={simulation.elapsedTime}\r\n                notImprovingSince={simulation.notImprovingSince}\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <GAConfigurationInfo \r\n                population={configuration.population}\r\n                parentSelectionStrategy={configuration.parentSelectionStrategy}\r\n                selectCutoff={configuration.selectCutoff}\r\n                tournamentSize={configuration.tournamentSize}\r\n                keepPreviousRatio={configuration.keepPreviousRatio}\r\n                newIndividualRatio={configuration.newIndividualRatio}\r\n                crossoverParentRatio={configuration.crossoverParentRatio}\r\n                mutationRate={configuration.mutationRate}\r\n                crossoverStrategy={configuration.crossoverStrategy}\r\n                vertexMovement={configuration.vertexMovement}\r\n                colorModificationRate={configuration.colorModificationRate}\r\n                enableSsim={configuration.enableSsim}\r\n                enablePixelDiff={configuration.enablePixelDiff}\r\n                enableSubDiff={configuration.enableSubDiff}\r\n                ratioSsim={configuration.ratioSsim}\r\n                ratioPixelDiff={configuration.ratioPixelDiff}\r\n                ratioSubDiff={configuration.ratioSubDiff}\r\n                enableTransparency={configuration.enableTransparency}\r\n                nbVertex={configuration.nbVertex}\r\n                nbPolygons={configuration.nbPolygons}\r\n                resolution={configuration.resolution}\r\n                className=\"\" \r\n              /> \r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n        </div>\r\n      }\r\n\r\n      {isStopped &&\r\n        <GAConfiguration\r\n          population={configuration.population}\r\n          parentSelectionStrategy={configuration.parentSelectionStrategy}\r\n          selectCutoff={configuration.selectCutoff}\r\n          tournamentSize={configuration.tournamentSize}\r\n          keepPreviousRatio={configuration.keepPreviousRatio}\r\n          newIndividualRatio={configuration.newIndividualRatio}\r\n          crossoverParentRatio={configuration.crossoverParentRatio}\r\n          mutationRate={configuration.mutationRate}\r\n          crossoverStrategy={configuration.crossoverStrategy}\r\n          vertexMovement={configuration.vertexMovement}\r\n          colorModificationRate={configuration.colorModificationRate}\r\n          enableSsim={configuration.enableSsim}\r\n          enablePixelDiff={configuration.enablePixelDiff}\r\n          enableSubDiff={configuration.enableSubDiff}\r\n          ratioSsim={configuration.ratioSsim}\r\n          ratioPixelDiff={configuration.ratioPixelDiff}\r\n          ratioSubDiff={configuration.ratioSubDiff}\r\n          enableTransparency={configuration.enableTransparency}\r\n          nbVertex={configuration.nbVertex}\r\n          nbPolygons={configuration.nbPolygons}\r\n          resolution={configuration.resolution}\r\n          className=\"five\" \r\n          onValuesChange={handleValuesChange}\r\n        />\r\n      }      \r\n    </div>            \r\n  );\r\n}\r\n\r\nexport default MyApp;\r\n","import { ChakraProvider } from \"@chakra-ui/react\"\nimport { render } from \"react-dom\";\nimport MyApp from \"./MyApp\"\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <ChakraProvider>\n    <MyApp />\n  </ChakraProvider>,\n  rootElement\n);"],"sourceRoot":""}